(function(P,G){typeof exports=="object"&&typeof module<"u"?G(exports):typeof define=="function"&&define.amd?define(["exports"],G):(P=typeof globalThis<"u"?globalThis:P||self,G(P.OpenAIAgentsRealtime={}))})(this,function(P){"use strict";var Oc=Object.defineProperty;var Ia=P=>{throw TypeError(P)};var Nc=(P,G,X)=>G in P?Oc(P,G,{enumerable:!0,configurable:!0,writable:!0,value:X}):P[G]=X;var _=(P,G,X)=>Nc(P,typeof G!="symbol"?G+"":G,X),Pr=(P,G,X)=>G.has(P)||Ia("Cannot "+X);var u=(P,G,X)=>(Pr(P,G,"read from private field"),X?X.call(P):G.get(P)),T=(P,G,X)=>G.has(P)?Ia("Cannot add the same private member more than once"):G instanceof WeakSet?G.add(P):G.set(P,X),y=(P,G,X,Pt)=>(Pr(P,G,"write to private field"),Pt?Pt.call(P,X):G.set(P,X),X),L=(P,G,X)=>(Pr(P,G,"access private method"),X);var wt,Ht,bt,Yt,Xt,xt,ae,je,Je,Be,St,ce,jr,Mr,Dt,pe,Qt,Kt,en,tn,at,qe,Ge,it,nn,Tt,Me,se,ot,qn,Ca,fe,rn,kt,xe,Ve,It,sn,an,on,At,ie,Zr,$r,Lr,Ea,Fr,ut,un,he,cn,dn,z,ln,ct,pn,dt,lt,te,fn,Ze,pt,ft,Gn,Oa,B,Z,hn,M,Et,Ot,mn,W,Nt,Rt,Ee,H,Vn,zn,Na,Wn,Ra,Ur,Da;const G={version:"0.0.13"};function X(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Pt(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Jr(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="text")return typeof e.text=="string"?e.text:void 0;if(e.type==="audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Pa(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function ja(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function Br(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function qr(n,e,t){if(e.type==="conversation.item.input_audio_transcription.completed")return n.map(a=>{if(a.itemId===e.item_id&&a.type==="message"&&"role"in a&&a.role==="user"){const i=a.content.map(o=>o.type==="input_audio"?{...o,transcript:e.transcript}:o);return{...a,content:i,status:"completed"}}return a});const r=!t&&e.type==="message"?Br(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?Br(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Ma={"User-Agent":`Agents/JavaScript ${G.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${G.version}`},Za=`openai-agents-sdk.${G.version}`;async function Hn(n){try{return[null,await n()]}catch(e){return[e,null]}}function $a(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const La=Symbol("Let zodToJsonSchema decide on which parser to use"),Gr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Fa=n=>typeof n=="string"?{...Gr,basePath:["#"],definitions:{},name:n}:{...Gr,basePath:["#"],definitions:{},...n},Yn=n=>"_def"in n?n._def:n;function Ua(n){if(!n)return!0;for(const e in n)return!1;return!0}const Ja=n=>{const e=Fa(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[Yn(s),{def:Yn(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Vr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function V(n,e,t,r,s){n[e]=t,Vr(n,e,r,s)}var jt;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(jt||(jt={}));var zr;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(zr||(zr={})),jt.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),jt.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);let Wr=class Aa extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const l=i.path[c];c===i.path.length-1?(o[l]=o[l]||{_errors:[]},o[l]._errors.push(t(i))):o[l]=o[l]||{_errors:[]},o=o[l],c++}}};return s(this),r}static assert(e){if(!(e instanceof Aa))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,jt.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}};Wr.create=n=>new Wr(n);var Hr;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(Hr||(Hr={}));var D;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(D||(D={}));function Ba(){return{}}function qa(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==D.ZodAny&&(t.items=J(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&V(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&V(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(V(t,"minItems",n.exactLength.value,n.exactLength.message,e),V(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function Ga(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function Va(){return{type:"boolean"}}function za(n,e){return J(n.type._def,e)}const Wa=(n,e)=>J(n.innerType._def,e);function Yr(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>Yr(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Ha(n,e)}}const Ha=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":V(t,"minimum",r.value,r.message,e);break;case"max":V(t,"maximum",r.value,r.message,e);break}return t};function Ya(n,e){return{...J(n.innerType._def,e),default:n.defaultValue()}}function Xa(n,e,t){return e.effectStrategy==="input"?J(n.schema._def,e,t):{}}function Qa(n){return{type:"string",enum:[...n.values]}}const Ka=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function ei(n,e){const t=[J(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),J(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Ka(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...c}=a;i=c}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function ti(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let Xn;const ze={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(Xn===void 0&&(Xn=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),Xn),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Xr(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?ni(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":ye(t,"email",s.message,e);break;case"format:idn-email":ye(t,"idn-email",s.message,e);break;case"pattern:zod":ve(t,ze.email,s.message,e);break}break;case"url":ye(t,"uri",s.message,e);break;case"uuid":ye(t,"uuid",s.message,e);break;case"regex":ve(t,s.regex,s.message,e);break;case"cuid":ve(t,ze.cuid,s.message,e);break;case"cuid2":ve(t,ze.cuid2,s.message,e);break;case"startsWith":ve(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ve(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":ye(t,"date-time",s.message,e);break;case"date":ye(t,"date",s.message,e);break;case"time":ye(t,"time",s.message,e);break;case"duration":ye(t,"duration",s.message,e);break;case"length":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ve(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&ye(t,"ipv4",s.message,e),s.version!=="v4"&&ye(t,"ipv6",s.message,e);break}case"emoji":ve(t,ze.emoji,s.message,e);break;case"ulid":{ve(t,ze.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{ye(t,"binary",s.message,e);break}case"contentEncoding:base64":{V(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ve(t,ze.base64,s.message,e);break}}break}case"nanoid":ve(t,ze.nanoid,s.message,e)}return t}const ni=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),ye=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):V(n,"format",e,t,r)},ve=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:Qr(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):V(n,"pattern",Qr(e,r),t,r)},Qr=(n,e)=>{var l;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,c=!1;for(let p=0;p<s.length;p++){if(i){a+=s[p],i=!1;continue}if(r.i){if(o){if(s[p].match(/[a-z]/)){c?(a+=s[p],a+=`${s[p-2]}-${s[p]}`.toUpperCase(),c=!1):s[p+1]==="-"&&((l=s[p+2])!=null&&l.match(/[a-z]/))?(a+=s[p],c=!0):a+=`${s[p]}${s[p].toUpperCase()}`;continue}}else if(s[p].match(/[a-z]/)){a+=`[${s[p]}${s[p].toUpperCase()}]`;continue}}if(r.m){if(s[p]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[p]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[p]==="."){a+=o?`${s[p]}\r
`:`[${s[p]}\r
]`;continue}a+=s[p],s[p]==="\\"?i=!0:o&&s[p]==="]"?o=!1:!o&&s[p]==="["&&(o=!0)}try{const p=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function Kr(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===D.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,c)=>({...o,[c]:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",c]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===D.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(Xr(n.keyType._def,e)).reduce((c,[l,p])=>l==="type"?c:{...c,[l]:p},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===D.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function ri(n,e){if(e.mapStrategy==="record")return Kr(n,e);const t=J(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function si(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function ai(){return{not:{}}}function ii(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const _n={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function oi(n,e){if(e.target==="openApi3")return es(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in _n&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=_n[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return es(n,e)}const es=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>J(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function ui(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:_n[n.innerType._def.typeName],nullable:!0}:{type:[_n[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=J(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function ci(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Vr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function di(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":J(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function li(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var c;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=J(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((c=a._def)==null?void 0:c.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:di(n,e)};return t.required.length||delete t.required,t}const pi=(n,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return J(n.innerType._def,e);const t=J(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},fi=(n,e)=>{if(e.pipeStrategy==="input")return J(n.in._def,e);if(e.pipeStrategy==="output")return J(n.out._def,e);const t=J(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=J(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function hi(n,e){return J(n.type._def,e)}function mi(n,e){const r={type:"array",uniqueItems:!0,items:J(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&V(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&V(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function gi(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:J(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>J(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function _i(){return{not:{}}}function yi(){return{}}const vi=(n,e)=>J(n.innerType._def,e);function J(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==La)return o}if(r&&!t){const o=wi(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=xi(n,n.typeName,e,t);return a&&Si(n,e,a),s.jsonSchema=a,a}const wi=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:bi(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},bi=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},xi=(n,e,t,r)=>{switch(e){case D.ZodString:return Xr(n,t);case D.ZodNumber:return ci(n,t);case D.ZodObject:return li(n,t);case D.ZodBigInt:return Ga(n,t);case D.ZodBoolean:return Va();case D.ZodDate:return Yr(n,t);case D.ZodUndefined:return _i();case D.ZodNull:return ii(t);case D.ZodArray:return qa(n,t);case D.ZodUnion:case D.ZodDiscriminatedUnion:return oi(n,t);case D.ZodIntersection:return ei(n,t);case D.ZodTuple:return gi(n,t);case D.ZodRecord:return Kr(n,t);case D.ZodLiteral:return ti(n,t);case D.ZodEnum:return Qa(n);case D.ZodNativeEnum:return si(n);case D.ZodNullable:return ui(n,t);case D.ZodOptional:return pi(n,t);case D.ZodMap:return ri(n,t);case D.ZodSet:return mi(n,t);case D.ZodLazy:return J(n.getter()._def,t);case D.ZodPromise:return hi(n,t);case D.ZodNaN:case D.ZodNever:return ai();case D.ZodEffects:return Xa(n,t,r);case D.ZodAny:return Ba();case D.ZodUnknown:return yi();case D.ZodDefault:return Ya(n,t);case D.ZodBranded:return za(n,t);case D.ZodReadonly:return vi(n,t);case D.ZodCatch:return Wa(n,t);case D.ZodPipeline:return fi(n,t);case D.ZodFunction:case D.ZodVoid:case D.ZodSymbol:return;default:return(s=>{})()}},Si=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),Ti=(n,e)=>{const t=Ja(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=J(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(Ua(t.definitions))return;const c={},l=new Set;for(let p=0;p<500;p++){const f=Object.entries(t.definitions).filter(([h])=>!l.has(h));if(f.length===0)break;for(const[h,x]of f)c[h]=J(Yn(x),{...t,currentPath:[...t.basePath,t.definitionPath,h]},!0)??{},l.add(h)}return c})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function ki(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function ts(n,e){return Ti(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function Ii(n,e,t){return $a({type:"json_schema",...t,name:e,strict:!0,schema:ts(n,{name:e})},r=>n.parse(JSON.parse(r)))}function Ai(n){return ki({type:"function",name:n.name,parameters:ts(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class $e extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class Ci extends $e{}class ns extends $e{}class de extends $e{}class K extends $e{}class rs extends $e{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Ei extends $e{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class ss extends $e{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class yn extends $e{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function We(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Oi(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function vn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function Qn(n,e){const t=r=>JSON.parse(r);if(We(n)){const r=Ai({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new K("Input type is not a ZodObject or a valid JSON schema")}function as(n){if(n==="text")return"text";if(We(n)){const e=Ii(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Ni(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var wn={exports:{}},Kn,is;function Ri(){if(is)return Kn;is=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;Kn=function(p,f){f=f||{};var h=typeof p;if(h==="string"&&p.length>0)return i(p);if(h==="number"&&isFinite(p))return f.long?c(p):o(p);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(p))};function i(p){if(p=String(p),!(p.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(p);if(f){var h=parseFloat(f[1]),x=(f[2]||"ms").toLowerCase();switch(x){case"years":case"year":case"yrs":case"yr":case"y":return h*a;case"weeks":case"week":case"w":return h*s;case"days":case"day":case"d":return h*r;case"hours":case"hour":case"hrs":case"hr":case"h":return h*t;case"minutes":case"minute":case"mins":case"min":case"m":return h*e;case"seconds":case"second":case"secs":case"sec":case"s":return h*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return h;default:return}}}}function o(p){var f=Math.abs(p);return f>=r?Math.round(p/r)+"d":f>=t?Math.round(p/t)+"h":f>=e?Math.round(p/e)+"m":f>=n?Math.round(p/n)+"s":p+"ms"}function c(p){var f=Math.abs(p);return f>=r?l(p,f,r,"day"):f>=t?l(p,f,t,"hour"):f>=e?l(p,f,e,"minute"):f>=n?l(p,f,n,"second"):p+" ms"}function l(p,f,h,x){var b=f>=h*1.5;return Math.round(p/h)+" "+x+(b?"s":"")}return Kn}var er,os;function Di(){if(os)return er;os=1;function n(e){r.debug=r,r.default=r,r.coerce=l,r.disable=o,r.enable=a,r.enabled=c,r.humanize=Ri(),r.destroy=p,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let h=0;for(let x=0;x<f.length;x++)h=(h<<5)-h+f.charCodeAt(x),h|=0;return r.colors[Math.abs(h)%r.colors.length]}r.selectColor=t;function r(f){let h,x=null,b,w;function E(...R){if(!E.enabled)return;const Y=E,ne=Number(new Date),me=ne-(h||ne);Y.diff=me,Y.prev=h,Y.curr=ne,h=ne,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let ge=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(Dr,Cc)=>{if(Dr==="%%")return"%";ge++;const ka=r.formatters[Cc];if(typeof ka=="function"){const Ec=R[ge];Dr=ka.call(Y,Ec),R.splice(ge,1),ge--}return Dr}),r.formatArgs.call(Y,R),(Y.log||r.log).apply(Y,R)}return E.namespace=f,E.useColors=r.useColors(),E.color=r.selectColor(f),E.extend=s,E.destroy=r.destroy,Object.defineProperty(E,"enabled",{enumerable:!0,configurable:!1,get:()=>x!==null?x:(b!==r.namespaces&&(b=r.namespaces,w=r.enabled(f)),w),set:R=>{x=R}}),typeof r.init=="function"&&r.init(E),E}function s(f,h){const x=r(this.namespace+(typeof h>"u"?":":h)+f);return x.log=this.log,x}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const h=(typeof f=="string"?f:"").trim().replace(/\s+/g,",").split(",").filter(Boolean);for(const x of h)x[0]==="-"?r.skips.push(x.slice(1)):r.names.push(x)}function i(f,h){let x=0,b=0,w=-1,E=0;for(;x<f.length;)if(b<h.length&&(h[b]===f[x]||h[b]==="*"))h[b]==="*"?(w=b,E=x,b++):(x++,b++);else if(w!==-1)b=w+1,E++,x=E;else return!1;for(;b<h.length&&h[b]==="*";)b++;return b===h.length}function o(){const f=[...r.names,...r.skips.map(h=>"-"+h)].join(",");return r.enable(""),f}function c(f){for(const h of r.skips)if(i(f,h))return!1;for(const h of r.names)if(i(f,h))return!0;return!1}function l(f){return f instanceof Error?f.stack||f.message:f}function p(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return er=n,er}var us;function Pi(){return us||(us=1,function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let c=!1;return()=>{c||(c=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let c;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(c=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(c[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(c){if(c[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+c[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const l="color: "+this.color;c.splice(1,0,l,"color: inherit");let p=0,f=0;c[0].replace(/%[a-zA-Z%]/g,h=>{h!=="%%"&&(p++,h==="%c"&&(f=p))}),c.splice(f,0,l)}e.log=console.debug||console.log||(()=>{});function s(c){try{c?e.storage.setItem("debug",c):e.storage.removeItem("debug")}catch{}}function a(){let c;try{c=e.storage.getItem("debug")||e.storage.getItem("DEBUG")}catch{}return!c&&typeof process<"u"&&"env"in process&&(c=process.env.DEBUG),c}function i(){try{return localStorage}catch{}}n.exports=Di()(e);const{formatters:o}=n.exports;o.j=function(c){try{return JSON.stringify(c)}catch(l){return"[UnexpectedJSONParseError]: "+l.message}}}(wn,wn.exports)),wn.exports}var ji=Pi();const Mi=Ni(ji);function Zi(){return yo()}function cs(n){const e=Zi();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const ds={get disabled(){return!0}},ls={get dontLogModelData(){return cs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return cs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},$i=ls.dontLogModelData,Li=ls.dontLogToolData;function ps(n="openai-agents"){return{namespace:n,debug:Mi(n),error:console.error,warn:console.warn,dontLogModelData:$i,dontLogToolData:Li}}const C=ps("openai-agents:core");function He(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Fi(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function bn(n){const e=n.name?vn(n.name):vn(n.execute.name),t=typeof n.errorFunction>"u"?Fi:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&We(n.parameters))throw new K("Strict mode is required for Zod parameters");const{parser:s,schema:a}=Qn(n.parameters,e);async function i(l,p){const[f,h]=await Hn(()=>s(p));if(f!==null)throw C.dontLogToolData?C.debug(`Invalid JSON input for tool ${e}`):C.debug(`Invalid JSON input for tool ${e}: ${p}`),new de("Invalid JSON input for tool");C.dontLogToolData?C.debug(`Invoking tool ${e}`):C.debug(`Invoking tool ${e} with input ${p}`);const x=await n.execute(h,l),b=He(x);return C.dontLogToolData?C.debug(`Tool ${e} completed`):C.debug(`Tool ${e} returned: ${b}`),x}async function o(l,p){return i(l,p).catch(f=>{if(t){const h=Ut();return h==null||h.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:f.toString()}}),t(l,f)}throw f})}const c=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:c}}var U;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(U||(U={}));var fs;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(fs||(fs={}));const k=U.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Le=n=>{switch(typeof n){case"undefined":return k.undefined;case"string":return k.string;case"number":return Number.isNaN(n)?k.nan:k.number;case"boolean":return k.boolean;case"function":return k.function;case"bigint":return k.bigint;case"symbol":return k.symbol;case"object":return Array.isArray(n)?k.array:n===null?k.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?k.promise:typeof Map<"u"&&n instanceof Map?k.map:typeof Set<"u"&&n instanceof Set?k.set:typeof Date<"u"&&n instanceof Date?k.date:k.object;default:return k.unknown}},v=U.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Oe extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const l=i.path[c];c===i.path.length-1?(o[l]=o[l]||{_errors:[]},o[l]._errors.push(t(i))):o[l]=o[l]||{_errors:[]},o=o[l],c++}}};return s(this),r}static assert(e){if(!(e instanceof Oe))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,U.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Oe.create=n=>new Oe(n);const tr=(n,e)=>{let t;switch(n.code){case v.invalid_type:n.received===k.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case v.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,U.jsonStringifyReplacer)}`;break;case v.unrecognized_keys:t=`Unrecognized key(s) in object: ${U.joinValues(n.keys,", ")}`;break;case v.invalid_union:t="Invalid input";break;case v.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${U.joinValues(n.options)}`;break;case v.invalid_enum_value:t=`Invalid enum value. Expected ${U.joinValues(n.options)}, received '${n.received}'`;break;case v.invalid_arguments:t="Invalid function arguments";break;case v.invalid_return_type:t="Invalid function return type";break;case v.invalid_date:t="Invalid date";break;case v.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:U.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case v.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case v.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case v.custom:t="Invalid input";break;case v.invalid_intersection_types:t="Intersection results could not be merged";break;case v.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case v.not_finite:t="Number must be finite";break;default:t=e.defaultError,U.assertNever(n)}return{message:t}};let Ui=tr;function Ji(){return Ui}const Bi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const c=r.filter(l=>!!l).slice().reverse();for(const l of c)o=l(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function S(n,e){const t=Ji(),r=Bi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===tr?void 0:tr].filter(s=>!!s)});n.common.issues.push(r)}class oe{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return O;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return oe.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return O;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const O=Object.freeze({status:"aborted"}),Mt=n=>({status:"dirty",value:n}),_e=n=>({status:"valid",value:n}),hs=n=>n.status==="aborted",ms=n=>n.status==="dirty",ht=n=>n.status==="valid",xn=n=>typeof Promise<"u"&&n instanceof Promise;var I;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(I||(I={}));class Se{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const gs=(n,e)=>{if(ht(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Oe(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:c}=n;return i.code==="invalid_enum_value"?{message:c??o.defaultError}:typeof o.data>"u"?{message:c??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:c??t??o.defaultError}},description:s}}class ${get description(){return this._def.description}_getType(e){return Le(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:Le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new oe,ctx:{common:e.parent.common,data:e.data,parsedType:Le(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(xn(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)},s=this._parseSync({data:e,path:r.path,parent:r});return gs(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return ht(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>ht(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:Le(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(xn(s)?s:Promise.resolve(s));return gs(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:v.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(c=>c?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new Qe({schema:this,typeName:N.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return De.create(this,this._def)}nullable(){return Ke.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Te.create(this)}promise(){return En.create(this,this._def)}or(e){return Tn.create([this,e],this._def)}and(e){return kn.create(this,e,this._def)}transform(e){return new Qe({...j(this._def),schema:this,typeName:N.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new On({...j(this._def),innerType:this,defaultValue:t,typeName:N.ZodDefault})}brand(){return new ks({typeName:N.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new Nn({...j(this._def),innerType:this,catchValue:t,typeName:N.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return dr.create(this,e)}readonly(){return Rn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const qi=/^c[^\s-]{8,}$/i,Gi=/^[0-9a-z]+$/,Vi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,zi=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Wi=/^[a-z0-9_-]{21}$/i,Hi=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,Yi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,Xi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Qi="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let nr;const Ki=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,eo=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,to=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,no=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,ro=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,so=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,_s="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",ao=new RegExp(`^${_s}$`);function ys(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function io(n){return new RegExp(`^${ys(n)}$`)}function oo(n){let e=`${_s}T${ys(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function uo(n,e){return!!((e==="v4"||!e)&&Ki.test(n)||(e==="v6"||!e)&&to.test(n))}function co(n,e){if(!Hi.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function lo(n,e){return!!((e==="v4"||!e)&&eo.test(n)||(e==="v6"||!e)&&no.test(n))}class Ne extends ${_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==k.string){const a=this._getOrReturnCtx(e);return S(a,{code:v.invalid_type,expected:k.string,received:a.parsedType}),O}const r=new oe;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?S(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&S(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")Xi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"email",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")nr||(nr=new RegExp(Qi,"u")),nr.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"emoji",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")zi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"uuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")Wi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"nanoid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")qi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")Gi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cuid2",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")Vi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"ulid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),S(s,{validation:"url",code:v.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"regex",code:v.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?oo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?ao.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?io(a).test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{code:v.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?Yi.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"duration",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?uo(e.data,a.version)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"ip",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?co(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"jwt",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?lo(e.data,a.version)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"cidr",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?ro.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"base64",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?so.test(e.data)||(s=this._getOrReturnCtx(e,s),S(s,{validation:"base64url",code:v.invalid_string,message:a.message}),r.dirty()):U.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:v.invalid_string,...I.errToObj(r)})}_addCheck(e){return new Ne({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...I.errToObj(e)})}url(e){return this._addCheck({kind:"url",...I.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...I.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...I.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...I.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...I.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...I.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...I.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...I.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...I.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...I.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...I.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...I.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...I.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...I.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...I.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...I.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...I.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...I.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...I.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...I.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...I.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...I.errToObj(t)})}nonempty(e){return this.min(1,I.errToObj(e))}trim(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Ne({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Ne.create=n=>new Ne({checks:[],typeName:N.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function po(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class mt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==k.number){const a=this._getOrReturnCtx(e);return S(a,{code:v.invalid_type,expected:k.number,received:a.parsedType}),O}let r;const s=new oe;for(const a of this._def.checks)a.kind==="int"?U.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),S(r,{code:v.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?po(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),S(r,{code:v.not_finite,message:a.message}),s.dirty()):U.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new mt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new mt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:I.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:I.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:I.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:I.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&U.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}mt.create=n=>new mt({checks:[],typeName:N.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Zt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==k.bigint)return this._getInvalidInput(e);let r;const s=new oe;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),S(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):U.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return S(t,{code:v.invalid_type,expected:k.bigint,received:t.parsedType}),O}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new Zt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new Zt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Zt.create=n=>new Zt({checks:[],typeName:N.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class rr extends ${_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==k.boolean){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.boolean,received:r.parsedType}),O}return _e(e.data)}}rr.create=n=>new rr({typeName:N.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Sn extends ${_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==k.date){const a=this._getOrReturnCtx(e);return S(a,{code:v.invalid_type,expected:k.date,received:a.parsedType}),O}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return S(a,{code:v.invalid_date}),O}const r=new oe;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:v.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),S(s,{code:v.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):U.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Sn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:I.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:I.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}Sn.create=n=>new Sn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:N.ZodDate,...j(n)});class vs extends ${_parse(e){if(this._getType(e)!==k.symbol){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.symbol,received:r.parsedType}),O}return _e(e.data)}}vs.create=n=>new vs({typeName:N.ZodSymbol,...j(n)});class sr extends ${_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.undefined,received:r.parsedType}),O}return _e(e.data)}}sr.create=n=>new sr({typeName:N.ZodUndefined,...j(n)});class ar extends ${_parse(e){if(this._getType(e)!==k.null){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.null,received:r.parsedType}),O}return _e(e.data)}}ar.create=n=>new ar({typeName:N.ZodNull,...j(n)});class ir extends ${constructor(){super(...arguments),this._any=!0}_parse(e){return _e(e.data)}}ir.create=n=>new ir({typeName:N.ZodAny,...j(n)});class ws extends ${constructor(){super(...arguments),this._unknown=!0}_parse(e){return _e(e.data)}}ws.create=n=>new ws({typeName:N.ZodUnknown,...j(n)});class Fe extends ${_parse(e){const t=this._getOrReturnCtx(e);return S(t,{code:v.invalid_type,expected:k.never,received:t.parsedType}),O}}Fe.create=n=>new Fe({typeName:N.ZodNever,...j(n)});class bs extends ${_parse(e){if(this._getType(e)!==k.undefined){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.void,received:r.parsedType}),O}return _e(e.data)}}bs.create=n=>new bs({typeName:N.ZodVoid,...j(n)});class Te extends ${_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==k.array)return S(t,{code:v.invalid_type,expected:k.array,received:t.parsedType}),O;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(S(t,{code:i?v.too_big:v.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(S(t,{code:v.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(S(t,{code:v.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new Se(t,i,t.path,o)))).then(i=>oe.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new Se(t,i,t.path,o)));return oe.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Te({...this._def,minLength:{value:e,message:I.toString(t)}})}max(e,t){return new Te({...this._def,maxLength:{value:e,message:I.toString(t)}})}length(e,t){return new Te({...this._def,exactLength:{value:e,message:I.toString(t)}})}nonempty(e){return this.min(1,e)}}Te.create=(n,e)=>new Te({type:n,minLength:null,maxLength:null,exactLength:null,typeName:N.ZodArray,...j(e)});function gt(n){if(n instanceof Q){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=De.create(gt(r))}return new Q({...n._def,shape:()=>e})}else return n instanceof Te?new Te({...n._def,type:gt(n.element)}):n instanceof De?De.create(gt(n.unwrap())):n instanceof Ke?Ke.create(gt(n.unwrap())):n instanceof Ye?Ye.create(n.items.map(e=>gt(e))):n}class Q extends ${constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=U.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==k.object){const l=this._getOrReturnCtx(e);return S(l,{code:v.invalid_type,expected:k.object,received:l.parsedType}),O}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof Fe&&this._def.unknownKeys==="strip"))for(const l in s.data)i.includes(l)||o.push(l);const c=[];for(const l of i){const p=a[l],f=s.data[l];c.push({key:{status:"valid",value:l},value:p._parse(new Se(s,f,s.path,l)),alwaysSet:l in s.data})}if(this._def.catchall instanceof Fe){const l=this._def.unknownKeys;if(l==="passthrough")for(const p of o)c.push({key:{status:"valid",value:p},value:{status:"valid",value:s.data[p]}});else if(l==="strict")o.length>0&&(S(s,{code:v.unrecognized_keys,keys:o}),r.dirty());else if(l!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const l=this._def.catchall;for(const p of o){const f=s.data[p];c.push({key:{status:"valid",value:p},value:l._parse(new Se(s,f,s.path,p)),alwaysSet:p in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const l=[];for(const p of c){const f=await p.key,h=await p.value;l.push({key:f,value:h,alwaysSet:p.alwaysSet})}return l}).then(l=>oe.mergeObjectSync(r,l)):oe.mergeObjectSync(r,c)}get shape(){return this._def.shape()}strict(e){return I.errToObj,new Q({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:I.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new Q({...this._def,unknownKeys:"strip"})}passthrough(){return new Q({...this._def,unknownKeys:"passthrough"})}extend(e){return new Q({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Q({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:N.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Q({...this._def,catchall:e})}pick(e){const t={};for(const r of U.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}omit(e){const t={};for(const r of U.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}deepPartial(){return gt(this)}partial(e){const t={};for(const r of U.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new Q({...this._def,shape:()=>t})}required(e){const t={};for(const r of U.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof De;)a=a._def.innerType;t[r]=a}return new Q({...this._def,shape:()=>t})}keyof(){return Ss(U.objectKeys(this.shape))}}Q.create=(n,e)=>new Q({shape:()=>n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.strictCreate=(n,e)=>new Q({shape:()=>n,unknownKeys:"strict",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.lazycreate=(n,e)=>new Q({shape:n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)});class Tn extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Oe(o.ctx.common.issues));return S(t,{code:v.invalid_union,unionErrors:i}),O}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const c of r){const l={...t,common:{...t.common,issues:[]},parent:null},p=c._parseSync({data:t.data,path:t.path,parent:l});if(p.status==="valid")return p;p.status==="dirty"&&!a&&(a={result:p,ctx:l}),l.common.issues.length&&i.push(l.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(c=>new Oe(c));return S(t,{code:v.invalid_union,unionErrors:o}),O}}get options(){return this._def.options}}Tn.create=(n,e)=>new Tn({options:n,typeName:N.ZodUnion,...j(e)});const Re=n=>n instanceof An?Re(n.schema):n instanceof Qe?Re(n.innerType()):n instanceof Cn?[n.value]:n instanceof Xe?n.options:n instanceof cr?U.objectValues(n.enum):n instanceof On?Re(n._def.innerType):n instanceof sr?[void 0]:n instanceof ar?[null]:n instanceof De?[void 0,...Re(n.unwrap())]:n instanceof Ke?[null,...Re(n.unwrap())]:n instanceof ks||n instanceof Rn?Re(n.unwrap()):n instanceof Nn?Re(n._def.innerType):[];class or extends ${_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.object)return S(t,{code:v.invalid_type,expected:k.object,received:t.parsedType}),O;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(S(t,{code:v.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),O)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Re(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new or({typeName:N.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function ur(n,e){const t=Le(n),r=Le(e);if(n===e)return{valid:!0,data:n};if(t===k.object&&r===k.object){const s=U.objectKeys(e),a=U.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const c=ur(n[o],e[o]);if(!c.valid)return{valid:!1};i[o]=c.data}return{valid:!0,data:i}}else if(t===k.array&&r===k.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],c=ur(i,o);if(!c.valid)return{valid:!1};s.push(c.data)}return{valid:!0,data:s}}else return t===k.date&&r===k.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class kn extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(hs(a)||hs(i))return O;const o=ur(a.value,i.value);return o.valid?((ms(a)||ms(i))&&t.dirty(),{status:t.value,value:o.data}):(S(r,{code:v.invalid_intersection_types}),O)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}kn.create=(n,e,t)=>new kn({left:n,right:e,typeName:N.ZodIntersection,...j(t)});class Ye extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.array)return S(r,{code:v.invalid_type,expected:k.array,received:r.parsedType}),O;if(r.data.length<this._def.items.length)return S(r,{code:v.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),O;!this._def.rest&&r.data.length>this._def.items.length&&(S(r,{code:v.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const c=this._def.items[o]||this._def.rest;return c?c._parse(new Se(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>oe.mergeArray(t,i)):oe.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new Ye({...this._def,rest:e})}}Ye.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new Ye({items:n,typeName:N.ZodTuple,rest:null,...j(e)})};class In extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.object)return S(r,{code:v.invalid_type,expected:k.object,received:r.parsedType}),O;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new Se(r,o,r.path,o)),value:i._parse(new Se(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?oe.mergeObjectAsync(t,s):oe.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof $?new In({keyType:e,valueType:t,typeName:N.ZodRecord,...j(r)}):new In({keyType:Ne.create(),valueType:e,typeName:N.ZodRecord,...j(t)})}}class xs extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.map)return S(r,{code:v.invalid_type,expected:k.map,received:r.parsedType}),O;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,c],l)=>({key:s._parse(new Se(r,o,r.path,[l,"key"])),value:a._parse(new Se(r,c,r.path,[l,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const c of i){const l=await c.key,p=await c.value;if(l.status==="aborted"||p.status==="aborted")return O;(l.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(l.value,p.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const c of i){const l=c.key,p=c.value;if(l.status==="aborted"||p.status==="aborted")return O;(l.status==="dirty"||p.status==="dirty")&&t.dirty(),o.set(l.value,p.value)}return{status:t.value,value:o}}}}xs.create=(n,e,t)=>new xs({valueType:e,keyType:n,typeName:N.ZodMap,...j(t)});class $t extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==k.set)return S(r,{code:v.invalid_type,expected:k.set,received:r.parsedType}),O;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(S(r,{code:v.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(S(r,{code:v.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(c){const l=new Set;for(const p of c){if(p.status==="aborted")return O;p.status==="dirty"&&t.dirty(),l.add(p.value)}return{status:t.value,value:l}}const o=[...r.data.values()].map((c,l)=>a._parse(new Se(r,c,r.path,l)));return r.common.async?Promise.all(o).then(c=>i(c)):i(o)}min(e,t){return new $t({...this._def,minSize:{value:e,message:I.toString(t)}})}max(e,t){return new $t({...this._def,maxSize:{value:e,message:I.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}$t.create=(n,e)=>new $t({valueType:n,minSize:null,maxSize:null,typeName:N.ZodSet,...j(e)});class An extends ${get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}An.create=(n,e)=>new An({getter:n,typeName:N.ZodLazy,...j(e)});class Cn extends ${_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return S(t,{received:t.data,code:v.invalid_literal,expected:this._def.value}),O}return{status:"valid",value:e.data}}get value(){return this._def.value}}Cn.create=(n,e)=>new Cn({value:n,typeName:N.ZodLiteral,...j(e)});function Ss(n,e){return new Xe({values:n,typeName:N.ZodEnum,...j(e)})}class Xe extends ${_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return S(t,{expected:U.joinValues(r),received:t.parsedType,code:v.invalid_type}),O}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return S(t,{received:t.data,code:v.invalid_enum_value,options:r}),O}return _e(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Xe.create(e,{...this._def,...t})}exclude(e,t=this._def){return Xe.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Xe.create=Ss;class cr extends ${_parse(e){const t=U.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==k.string&&r.parsedType!==k.number){const s=U.objectValues(t);return S(r,{expected:U.joinValues(s),received:r.parsedType,code:v.invalid_type}),O}if(this._cache||(this._cache=new Set(U.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=U.objectValues(t);return S(r,{received:r.data,code:v.invalid_enum_value,options:s}),O}return _e(e.data)}get enum(){return this._def.values}}cr.create=(n,e)=>new cr({values:n,typeName:N.ZodNativeEnum,...j(e)});class En extends ${unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==k.promise&&t.common.async===!1)return S(t,{code:v.invalid_type,expected:k.promise,received:t.parsedType}),O;const r=t.parsedType===k.promise?t.data:Promise.resolve(t.data);return _e(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}En.create=(n,e)=>new En({type:n,typeName:N.ZodPromise,...j(e)});class Qe extends ${innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===N.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{S(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return O;const c=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return c.status==="aborted"?O:c.status==="dirty"||t.value==="dirty"?Mt(c.value):c});{if(t.value==="aborted")return O;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?O:o.status==="dirty"||t.value==="dirty"?Mt(o.value):o}}if(s.type==="refinement"){const i=o=>{const c=s.refinement(o,a);if(r.common.async)return Promise.resolve(c);if(c instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?O:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?O:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!ht(i))return O;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>ht(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):O);U.assertNever(s)}}Qe.create=(n,e,t)=>new Qe({schema:n,typeName:N.ZodEffects,effect:e,...j(t)}),Qe.createWithPreprocess=(n,e,t)=>new Qe({schema:e,effect:{type:"preprocess",transform:n},typeName:N.ZodEffects,...j(t)});class De extends ${_parse(e){return this._getType(e)===k.undefined?_e(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}De.create=(n,e)=>new De({innerType:n,typeName:N.ZodOptional,...j(e)});class Ke extends ${_parse(e){return this._getType(e)===k.null?_e(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ke.create=(n,e)=>new Ke({innerType:n,typeName:N.ZodNullable,...j(e)});class On extends ${_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===k.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}On.create=(n,e)=>new On({innerType:n,typeName:N.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class Nn extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return xn(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Oe(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}Nn.create=(n,e)=>new Nn({innerType:n,typeName:N.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class Ts extends ${_parse(e){if(this._getType(e)!==k.nan){const r=this._getOrReturnCtx(e);return S(r,{code:v.invalid_type,expected:k.nan,received:r.parsedType}),O}return{status:"valid",value:e.data}}}Ts.create=n=>new Ts({typeName:N.ZodNaN,...j(n)});class ks extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class dr extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?O:a.status==="dirty"?(t.dirty(),Mt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?O:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new dr({in:e,out:t,typeName:N.ZodPipeline})}}class Rn extends ${_parse(e){const t=this._def.innerType._parse(e),r=s=>(ht(s)&&(s.value=Object.freeze(s.value)),s);return xn(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Rn.create=(n,e)=>new Rn({innerType:n,typeName:N.ZodReadonly,...j(e)});var N;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(N||(N={}));const d=Ne.create,A=mt.create,Lt=rr.create,F=ir.create;Fe.create;const q=Te.create,g=Q.create,Is=Tn.create,le=or.create;kn.create,Ye.create;const ee=In.create,fo=An.create,m=Cn.create,ue=Xe.create;En.create,De.create,Ke.create,g({name:d(),description:d().optional(),inputSchema:g({type:m("object"),properties:ee(d(),F()),required:q(d()),additionalProperties:Lt()})});async function ho(n,e=!1){const t=[],r=new Set;for(const s of n){const a=await mo(s,e),o=[...new Set(a.map(c=>c.name))].filter(c=>r.has(c));if(o.length>0)throw new K(`Duplicate tool names found across MCP servers: ${o.join(", ")}`);for(const c of a)r.add(c.name),t.push(c)}return t}const lr={};async function mo(n,e){return n.cacheToolsList&&lr[n.name]?lr[n.name].map(t=>As(t,n,e)):Uo(async t=>{const r=await n.listTools();t.spanData.result=r.map(a=>a.name);const s=r.map(a=>As(a,n,e));return n.cacheToolsList&&(lr[n.name]=r),s},{data:{server:n.name}})}async function go(n,e=!1){return ho(n,e)}function As(n,e,t){var i,o,c,l;async function r(p,f){let h={};typeof p=="string"&&p?h=JSON.parse(p):typeof p=="object"&&p!=null&&(h=p);const x=Ut();x&&(x.spanData.mcp_data={server:e.name});const b=await e.callTool(n.name,h);return b.length===1?b[0]:b}const s={type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((c=n.inputSchema)==null?void 0:c.required)??[],additionalProperties:((l=n.inputSchema)==null?void 0:l.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const p=_o(s);return bn({name:n.name,description:n.description||"",parameters:p,strict:!0,execute:r})}catch(p){C.warn(`Error converting MCP schema to strict mode: ${p}`)}const a={...s,additionalProperties:!0};return bn({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function _o(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function yo(){return{}}class Dn{constructor(){T(this,wt,new EventTarget)}on(e,t){return u(this,wt).addEventListener(e,r=>t(...r.detail??[])),this}off(e,t){return u(this,wt).removeEventListener(e,r=>t(...r.detail??[])),this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,wt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}wt=new WeakMap;const Cs=crypto.randomUUID.bind(crypto),vo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},wo=globalThis.ReadableStream,bo=globalThis.TransformStream;class xo{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class So{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const To=new So;let Es;function ke(){return Es??(Es=new xo),Es}function Ft(){const n=ke().getStore();return n!=null&&n.trace?n.trace:null}function Ut(){const n=ke().getStore();return n!=null&&n.span?n.span:null}function Os(n){return async()=>{const e=Ft();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function ko(n,e,t={}){const r=typeof n=="string"?Ie().createTrace({...t,name:n}):n;return ke().run({trace:r},Os(e))}async function Io(n,e={}){if(Ft())return await n();const r=Ie().createTrace(e);return ke().run({trace:r},Os(n))}function Pn(n){const e=ke().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,ke().enterWith(e)}function Jt(){var e;const n=ke().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,ke().enterWith(n))}function _t(n){const e=Ut();e&&e.setError(n)}function Ao(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function pr(n){const e=ke().getStore();if(!e)throw new Error("No existing trace found");const t=Ao(e);return ke().run(t,n)}class Co{async export(e){if(ds.disabled){C.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class Eo{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){T(this,ce);T(this,Ht);T(this,bt);T(this,Yt);T(this,Xt);T(this,xt);T(this,ae,[]);T(this,je);T(this,Je,null);T(this,Be,!1);T(this,St,null);y(this,Ht,t),y(this,bt,r),y(this,Yt,s),y(this,Xt,t*a),y(this,xt,e),y(this,je,To),C.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,St,new AbortController),L(this,ce,Mr).call(this)}async onTraceStart(e){await L(this,ce,jr).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await L(this,ce,jr).call(this,e)}async shutdown(e){var t;for(e&&u(this,je).setTimeout(()=>{var r;(r=u(this,St))==null||r.abort()},e),C.debug("Shutting down gracefully");u(this,ae).length>0;){if(C.debug(`Waiting for buffer to empty. Items left: ${u(this,ae).length}`),u(this,Be)||await L(this,ce,Dt).call(this,!0),(t=u(this,St))!=null&&t.signal.aborted){C.debug("Timeout reached, force flushing"),await L(this,ce,Dt).call(this,!0);break}await new Promise(r=>u(this,je).setTimeout(r,500))}C.debug("Buffer empty. Exiting"),u(this,je)&&u(this,Je)&&u(this,je).clearTimeout(u(this,Je))}async forceFlush(){u(this,ae).length>0&&await L(this,ce,Dt).call(this,!0)}}Ht=new WeakMap,bt=new WeakMap,Yt=new WeakMap,Xt=new WeakMap,xt=new WeakMap,ae=new WeakMap,je=new WeakMap,Je=new WeakMap,Be=new WeakMap,St=new WeakMap,ce=new WeakSet,jr=async function(e){if(u(this,ae).length+1>u(this,Ht)){C.error("Dropping trace because buffer is full");return}u(this,ae).push(e),u(this,ae).length>u(this,Xt)&&await L(this,ce,Dt).call(this)},Mr=function(){y(this,Je,u(this,je).setTimeout(async()=>{await L(this,ce,Dt).call(this),L(this,ce,Mr).call(this)},u(this,Yt))),typeof u(this,Je).unref=="function"&&u(this,Je).unref()},Dt=async function(e=!1){if(u(this,ae).length!==0){if(C.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,ae).length}`),e||u(this,ae).length<u(this,bt)){const t=[...u(this,ae)];y(this,ae,[]),y(this,Be,!0),await u(this,xt).export(t),y(this,Be,!1)}else if(u(this,ae).length>0){const t=u(this,ae).splice(0,u(this,bt));y(this,Be,!0),await u(this,xt).export(t),y(this,Be,!1)}}};class Oo{constructor(){T(this,pe,[])}start(){for(const e of u(this,pe))e.start&&e.start()}addTraceProcessor(e){u(this,pe).push(e)}setProcessors(e){C.debug("Shutting down old processors");for(const t of u(this,pe))t.shutdown();y(this,pe,e)}async onTraceStart(e){for(const t of u(this,pe))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,pe))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,pe))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,pe))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,pe))await t.shutdown(e)}async forceFlush(){for(const e of u(this,pe))await e.forceFlush()}}pe=new WeakMap;let fr=null,hr=null;function No(){return fr||(fr=new Co),fr}function Ns(){return hr||(hr=new Eo(No())),hr}function Rs(){return new Date().toISOString()}function Ds(){return`trace_${Cs().replace(/-/g,"")}`}function Ro(){return`span_${Cs().replace(/-/g,"").slice(0,24)}`}function Do(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Or=class Or{constructor(e,t){_(this,"type","trace.span");T(this,Qt);T(this,Kt);T(this,en);T(this,tn);T(this,at);T(this,qe);T(this,Ge);T(this,it);T(this,nn);y(this,Kt,e.traceId),y(this,en,e.spanId??Ro()),y(this,Qt,e.data),y(this,at,t),y(this,tn,e.parentId??null),y(this,it,e.error??null),y(this,qe,e.startedAt??null),y(this,Ge,e.endedAt??null)}get traceId(){return u(this,Kt)}get spanData(){return u(this,Qt)}get spanId(){return u(this,en)}get parentId(){return u(this,tn)}get previousSpan(){return u(this,nn)}set previousSpan(e){y(this,nn,e)}start(){if(u(this,qe)){C.warn("Span already started");return}y(this,qe,Rs()),u(this,at).onSpanStart(this)}end(){if(u(this,Ge)){C.debug("Span already finished",this.spanData);return}y(this,Ge,Rs()),u(this,at).onSpanEnd(this)}setError(e){y(this,it,e)}get error(){return u(this,it)}get startedAt(){return u(this,qe)}get endedAt(){return u(this,Ge)}clone(){var t;const e=new Or({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,qe)??void 0,endedAt:u(this,Ge)??void 0,error:u(this,it)??void 0},u(this,at));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Do(this.spanData),error:this.error}}};Qt=new WeakMap,Kt=new WeakMap,en=new WeakMap,tn=new WeakMap,at=new WeakMap,qe=new WeakMap,Ge=new WeakMap,it=new WeakMap,nn=new WeakMap;let Bt=Or;class Ue extends Bt{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Nr=class Nr{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");T(this,Tt);T(this,Me);this.traceId=e.traceId??Ds(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,Tt,t??Ns()),y(this,Me,e.started??!1)}async start(){u(this,Me)||(y(this,Me,!0),await u(this,Tt).onTraceStart(this))}async end(){u(this,Me)&&(y(this,Me,!1),await u(this,Tt).onTraceEnd(this))}clone(){return new Nr({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,Me)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};Tt=new WeakMap,Me=new WeakMap;let qt=Nr;class mr extends qt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Po{constructor(){T(this,qn);T(this,se);T(this,ot);y(this,se,new Oo),y(this,ot,ds.disabled),L(this,qn,Ca).call(this)}registerProcessor(e){u(this,se).addTraceProcessor(e)}setProcessors(e){u(this,se).setProcessors(e)}getCurrentTrace(){return Ft()}getCurrentSpan(){return Ut()}setDisabled(e){y(this,ot,e)}startExportLoop(){u(this,se).start()}createTrace(e){if(u(this,ot))return C.debug("Tracing is disabled, Not creating trace %o",e),new mr;const t=e.traceId??Ds(),r=e.name??"Agent workflow";return C.debug("Creating trace %s with name %s",t,r),new qt({...e,name:r,traceId:t},u(this,se))}createSpan(e,t){if(u(this,ot)||e.disabled)return C.debug("Tracing is disabled, Not creating span %o",e),new Ue(e.data,u(this,se));let r,s;if(t){if(t instanceof qt){if(t instanceof mr)return C.debug("Parent trace is no-op, returning NoopSpan"),new Ue(e.data,u(this,se));s=t.traceId}else if(t instanceof Bt){if(t instanceof Ue)return C.debug("Parent span is no-op, returning NoopSpan"),new Ue(e.data,u(this,se));r=t.spanId,s=t.traceId}}else{const a=Ft(),i=Ut();if(!a)return C.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ue(e.data,u(this,se));if(i instanceof Ue||a instanceof mr)return C.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Ue(e.data,u(this,se));s=a.traceId,i?(C.debug("Using parent span %s",i.spanId),r=i.spanId):C.debug("No parent span, using current trace %s",a.traceId)}return s?(C.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Bt({...e,traceId:s,parentId:r},u(this,se))):(C.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Ue(e.data,u(this,se)))}async shutdown(e){try{C.debug("Shutting down tracing provider"),await u(this,se).shutdown(e)}catch(t){C.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,se).forceFlush()}}se=new WeakMap,ot=new WeakMap,qn=new WeakSet,Ca=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),Ps("SIGINT")||process.exit(130)}),process.on("SIGTERM",async()=>{await e(),Ps("SIGTERM")||process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{C.error("Unhandled rejection",t,r),await e(),jo("unhandledRejection")||process.exit(1)})}};function Ps(n){return process.listeners(n).length>1}function jo(n){return process.listeners(n).length>1}let gr;function Ie(){return gr||(gr=new Po),gr}function jn(n){return async(e,...t)=>pr(async()=>{const r=n(...t);Pn(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),Jt()}})}function js(n,e){var t;return Ie().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Mo(n,e){var t,r;return Ie().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Ms=jn(Mo);function Zo(n,e){return Ie().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const $o=jn(Zo);function Lo(n,e){return Ie().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Zs=jn(Lo);function Fo(n,e){return Ie().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Uo=jn(Fo);function Jo(n){Ie().registerProcessor(n)}class _r{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Bo extends _r{constructor(){super(...arguments);_(this,"eventEmitter",new Dn)}}class qo extends _r{constructor(){super(...arguments);_(this,"eventEmitter",new Dn)}}function $s({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function yr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Ls(n){return JSON.stringify({assistant:n.name})}function Go(n){return`transfer_to_${vn(n.name)}`}function Vo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Fs{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=Go(e),this.toolDescription=Vo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Us(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new K("You must provide either both `onHandoff` and `inputType` or neither.");async function i(c,l){var p;if(t){if(!l)throw _t({message:`Handoff function expected non empty input but got: ${l}`,data:{details:"input is empty"}}),new de("Handoff function expected non empty input");try{const f=await t(l);e.onHandoff&&await e.onHandoff(c,f)}catch(f){throw _t({message:"Invalid JSON provided",data:{}}),C.dontLogToolData||C.error(`Invalid JSON when parsing: ${l}. Error: ${f}`),new de("Invalid JSON provided")}}else await((p=e.onHandoff)==null?void 0:p.call(e,c));return n}const o=new Fs(n,i);if(e.inputType){const c=Qn(e.inputType,o.toolName);o.inputJsonSchema=c.schema,o.strictJsonSchema=!0,t=c.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function Mn(n){return n instanceof Fs?n:Us(n)}function zo(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const re=g({providerData:ee(d(),F()).optional()}),et=re.extend({id:d().optional()}),Wo=re.extend({type:m("refusal"),refusal:d()}),Ho=re.extend({type:m("output_text"),text:d()}),vr=re.extend({type:m("input_text"),text:d()}),Yo=re.extend({type:m("input_image"),image:d().or(g({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),Xo=re.extend({type:m("input_file"),file:d().describe("Either base64 encoded file data or a publicly accessible file URL").or(g({id:d().describe("OpenAI file ID")})).or(g({url:d().describe("Publicly accessible PDF file URL")})).describe("Contents of the file or an object with a file ID.")}),Js=re.extend({type:m("audio"),audio:d().or(g({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),Qo=re.extend({type:m("image"),image:d().describe("Base64 encoded image data")}),Ko=re.extend({type:m("text"),text:d()}),eu=re.extend({type:m("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),tu=re.extend({type:m("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),nu=le("type",[g({type:m("screenshot")}),g({type:m("click"),x:A(),y:A(),button:ue(["left","right","wheel","back","forward"])}),g({type:m("double_click"),x:A(),y:A()}),g({type:m("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),g({type:m("type"),text:d()}),g({type:m("wait")}),g({type:m("move"),x:A(),y:A()}),g({type:m("keypress"),keys:q(d())}),g({type:m("drag"),path:q(g({x:A(),y:A()}))})]),ru=le("type",[Ho,Wo,vr,Js,Qo]),wr=et.extend({type:m("message").optional()}),Zn=wr.extend({role:m("assistant"),status:ue(["in_progress","completed","incomplete"]),content:q(ru)}),su=le("type",[vr,Yo,Xo,Js]),Bs=wr.extend({role:m("user"),content:q(su).or(d())}),qs=wr.extend({role:m("system"),content:d()});le("role",[qs,Zn,Bs]);const Gt=et.extend({type:m("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),Vt=et.extend({type:m("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:ue(["in_progress","completed","incomplete"]).optional(),arguments:d()}),br=et.extend({type:m("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:ue(["in_progress","completed","incomplete"]),output:le("type",[Ko,eu])}),xr=et.extend({type:m("computer_call"),callId:d().describe("The ID of the computer call"),status:ue(["in_progress","completed","incomplete"]),action:nu}),au=et.extend({type:m("computer_call_result"),callId:d().describe("The ID of the computer call"),output:tu}),iu=le("type",[xr,Vt,Gt]),Sr=re.extend({id:d().optional(),type:m("reasoning"),content:q(vr)}),Gs=et.extend({type:m("unknown")}),Tr=le("type",[Zn,Gt,Vt,xr,Sr,Gs]),ou=Is([Bs,Zn,qs,Gt,Vt,xr,br,au,Sr,Gs]),uu=g({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:ee(d(),A()).optional(),outputTokensDetails:ee(d(),A()).optional()}),Vs=re.extend({type:m("output_text_delta"),delta:d()}),cu=re.extend({type:m("response_started")}),zs=re.extend({type:m("response_done"),response:re.extend({id:d(),usage:uu,output:q(Tr)})}),du=re.extend({type:m("model"),event:F().describe("The event from the model")});le("type",[Vs,zs,cu,du]);class $n{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);typeof e>"u"?(this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[]):(this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??0,this.inputTokensDetails=e!=null&&e.inputTokensDetails?[e.inputTokensDetails]:[],this.outputTokensDetails=e!=null&&e.outputTokensDetails?[e.outputTokensDetails]:[])}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,e.inputTokensDetails&&this.inputTokensDetails.push(...e.inputTokensDetails),e.outputTokensDetails&&this.outputTokensDetails.push(...e.outputTokensDetails)}}class yt{constructor(e={}){_(this,"context");_(this,"usage");T(this,fe);this.context=e,this.usage=new $n,y(this,fe,new Map)}_rebuildApprovals(e){y(this,fe,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=u(this,fe).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return C.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return C.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!0,rejected:[]});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}u(this,fe).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!1,rejected:!0});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}u(this,fe).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,fe).entries())}}}fe=new WeakMap;class Ws{constructor(e){_(this,"state");this.state=e}get history(){return Bn(this.input,this.newItems)}get output(){return Bn([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);C.warn("Accessed finalOutput before agent run is completed.")}}class kr extends Ws{constructor(e){super(e)}}class lu extends Ws{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");T(this,rn,null);T(this,kt);T(this,xe);T(this,Ve);T(this,It);T(this,sn);T(this,an);T(this,on,!1);y(this,kt,t.signal),u(this,kt)&&u(this,kt).addEventListener("abort",async()=>{await u(this,Ve).cancel()}),y(this,Ve,new wo({start:r=>{y(this,xe,r)},cancel:()=>{y(this,on,!0)}})),y(this,It,new Promise((r,s)=>{y(this,sn,r),y(this,an,s)}))}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,xe))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,xe)&&(u(this,xe).close(),y(this,xe,void 0),(t=u(this,sn))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,xe)&&(u(this,xe).error(t),y(this,xe,void 0)),y(this,rn,t),(r=u(this,an))==null||r.call(this,t),u(this,It).catch(s=>{C.debug(`Resulted in an error: ${s}`)})}get cancelled(){return u(this,on)}toStream(){return u(this,Ve)}get completed(){return u(this,It)}get error(){return u(this,rn)}toTextStream(t={}){const r=u(this,Ve).pipeThrough(new bo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=Vs.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?vo.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Ve)[Symbol.asyncIterator]()}}rn=new WeakMap,kt=new WeakMap,xe=new WeakMap,Ve=new WeakMap,It=new WeakMap,sn=new WeakMap,an=new WeakMap,on=new WeakMap;function Hs(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Ys(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class tt{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class Ln extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class nt extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class vt extends tt{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:He(this.output)}}}class Ir extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Ar extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Cr extends tt{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class Ae extends tt{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function Xs(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function pu(n){return n.output.length===0?"":Xs(n.output[n.output.length-1])||""}class fu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class hu{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class mu{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function Qs(n,e,t,r){var b;const s=[],a=[],i=[],o=[],c=[],l=[],p=new Map(r.map(w=>[w.toolName,w])),f=new Map(t.filter(w=>w.type==="function").map(w=>[w.name,w])),h=t.find(w=>w.type==="computer"),x=new Map(t.filter(w=>{var E;return w.type==="hosted_tool"&&((E=w.providerData)==null?void 0:E.type)==="mcp"}).map(w=>w).map(w=>[w.providerData.server_label,w]));for(const w of n.output){if(w.type==="message")w.role==="assistant"&&s.push(new Ln(w,e));else if(w.type==="hosted_tool_call"){s.push(new nt(w,e));const R=w.name;if(l.push(R),((b=w.providerData)==null?void 0:b.type)==="mcp_approval_request"||w.name==="mcp_approval_request"){const Y=w.providerData,ne=Y.server_label,me=x.get(ne);if(typeof me>"u"){const gn=`MCP server (${ne}) not found in Agent (${e.name})`;throw _t({message:gn,data:{mcp_server_label:ne}}),new de(gn)}const ge=new Ae({type:"hosted_tool_call",name:Y.name,id:Y.id,status:"in_progress",providerData:Y},e);c.push({requestItem:ge,mcpTool:me}),me.providerData.on_approval||s.push(ge)}}else if(w.type==="reasoning")s.push(new Ir(w,e));else if(w.type==="computer_call"){if(s.push(new nt(w,e)),l.push("computer_use"),!h)throw _t({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new de("Model produced computer action without a computer tool.");o.push({toolCall:w,computer:h})}if(w.type!=="function_call")continue;l.push(w.name);const E=p.get(w.name);if(E)s.push(new Ar(w,e)),a.push({toolCall:w,handoff:E});else{const R=f.get(w.name);if(!R)throw _t({message:`Tool ${w.name} not found in agent ${e.name}.`,data:{tool_name:w.name,agent_name:e.name}}),new de(`Tool ${w.name} not found in agent ${e.name}.`);s.push(new nt(w,e)),i.push({toolCall:w,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,mcpApprovalRequests:c,toolsUsed:l,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||c.length>0||o.length>0}}}const gu=le("type",[g({type:m("next_step_handoff"),newAgent:F()}),g({type:m("next_step_final_output"),output:d()}),g({type:m("next_step_run_again")}),g({type:m("next_step_interruption"),data:ee(d(),F())})]);class we{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function Ks(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function ea(n,e,t,r,s,a,i){const o=t.filter(b=>b instanceof Ae&&"callId"in b.rawItem&&b.rawItem.type==="function_call").map(b=>b.rawItem.callId),c=s.functions.filter(b=>o.includes(b.toolCall.callId)),l=await na(n,c,a,i),p=l.map(b=>b.runItem),f=s.mcpApprovalRequests.filter(b=>{var w;return b.requestItem.type==="tool_approval_item"&&b.requestItem.rawItem.type==="hosted_tool_call"&&((w=b.requestItem.rawItem.providerData)==null?void 0:w.type)==="mcp_approval_request"});for(const b of f){const w=b.requestItem.rawItem.id,E=i._context.isToolApproved({toolName:b.requestItem.rawItem.name,callId:w});if(typeof E<"u"){const R={approve:E,approval_request_id:w,reason:void 0};p.push(new nt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const h=await ra(n,l,i),x=t.filter(b=>!(b instanceof Ae));return h.isFinalOutput?(a.emit("agent_end",i._context,n,h.finalOutput),n.emit("agent_end",i._context,h.finalOutput),new we(e,r,x,p,{type:"next_step_final_output",output:h.finalOutput})):h.isInterrupted?new we(e,r,x,p,{type:"next_step_interruption",data:{interruptions:h.interruptions}}):new we(e,r,x,p,{type:"next_step_run_again"})}async function ta(n,e,t,r,s,a,i){const o=t;let c=s.newItems;const[l,p]=await Promise.all([na(n,s.functions,a,i),yu(n,s.computerActions,a,i._context)]);if(c=c.concat(l.map(b=>b.runItem)),c=c.concat(p),s.mcpApprovalRequests.length>0)for(const b of s.mcpApprovalRequests){const w=b.mcpTool.providerData,E=b.requestItem.rawItem.providerData;if(w.on_approval){const R=await w.on_approval(i._context,b.requestItem),Y={approve:R.approve,approval_request_id:E.id,reason:R.reason};c.push(new nt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:Y},n))}else{c.push(b.requestItem);const R={type:"hosted_mcp_tool_approval",tool:b.mcpTool,runItem:new Ae({type:"hosted_tool_call",name:E.name,id:E.id,arguments:E.arguments,status:"in_progress",providerData:E},n)};l.push(R)}}if(s.handoffs.length>0)return await vu(n,e,o,c,r,s.handoffs,a,i._context);const f=await ra(n,l,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new we(e,r,o,c,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new we(e,r,o,c,{type:"next_step_interruption",data:{interruptions:f.interruptions}});const h=c.filter(b=>b instanceof Ln),x=h.length>0?Xs(h[h.length-1].rawItem):void 0;if(!x)return new we(e,r,o,c,{type:"next_step_run_again"});if(n.outputType==="text"&&!s.hasToolsOrApprovalsToRun())return new we(e,r,o,c,{type:"next_step_final_output",output:x});if(n.outputType!=="text"&&x){const{parser:b}=Qn(n.outputType,"final_output"),[w]=await Hn(()=>b(x));if(w)throw _t({message:"Invalid output type",data:{error:String(w)}}),new de("Invalid output type");return new we(e,r,o,c,{type:"next_step_final_output",output:x})}return new we(e,r,o,c,{type:"next_step_run_again"})}function Fn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:He(e)}}}async function na(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(We(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const c=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(c===!1)return Ms(async l=>{const p="Tool execution was not approved.";return l.setError({message:p,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),l.spanData.output=p,{type:"function_output",tool:a.tool,output:p,runItem:new vt(Fn(a.toolCall,p),n,p)}},{data:{name:a.tool.name}});if(c!==!0)return{type:"function_approval",tool:a.tool,runItem:new Ae(a.toolCall,n)}}return Ms(async c=>{t.config.traceIncludeSensitiveData&&(c.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool,{toolCall:a.toolCall}),n.emit("agent_tool_start",r._context,a.tool,{toolCall:a.toolCall});const l=await a.tool.invoke(r._context,a.toolCall.arguments),p=He(l);return t.emit("agent_tool_end",r._context,n,a.tool,p,{toolCall:a.toolCall}),n.emit("agent_tool_end",r._context,a.tool,p,{toolCall:a.toolCall}),t.config.traceIncludeSensitiveData&&(c.spanData.output=p),{type:"function_output",tool:a.tool,output:l,runItem:new vt(Fn(a.toolCall,l),n,l)}}catch(l){throw c.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(l)}}),l}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new Ei(`Failed to run function tools: ${a}`,a,r)}}async function _u(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function yu(n,e,t,r,s=void 0){const a=s??C,i=[];for(const o of e){const c=o.computer.computer,l=o.toolCall;t.emit("agent_tool_start",r,n,o.computer,{toolCall:l}),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer,{toolCall:l});let p;try{p=await _u(c,l)}catch(x){a.error("Failed to execute computer action:",x),p=""}t.emit("agent_tool_end",r,n,o.computer,p,{toolCall:l}),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,p,{toolCall:l});const f=p?`data:image/png;base64,${p}`:"",h={type:"computer_call_result",callId:l.callId,output:{type:"computer_screenshot",data:f}};i.push(new vt(h,n,f))}return i}async function vu(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return C.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new we(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const l="Multiple handoffs detected, ignoring this one.";for(let p=1;p<a.length;p++)r.push(new vt(Fn(a[p].toolCall,l),n,l))}const c=a[0];return $o(async l=>{const p=c.handoff,f=await p.onInvokeHandoff(o,c.toolCall.arguments);if(l.spanData.to_agent=f.name,a.length>1){const x=a.map(b=>b.handoff.agentName);l.setError({message:"Multiple handoffs requested",data:{requested_agents:x}})}r.push(new Cr(Fn(c.toolCall,Ls(f)),n,f)),i.emit("agent_handoff",o,n,f),n.emit("agent_handoff",o,f);const h=p.inputFilter??i.config.handoffInputFilter;if(h){C.debug("Filtering inputs for handoff"),typeof h!="function"&&l.setError({message:"Invalid input filter",data:{details:"not callable"}});const x={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r]},b=h(x);e=b.inputHistory,t=b.preHandoffItems,r=b.newItems}return new we(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Un={isFinalOutput:!1,isInterrupted:void 0};async function ra(n,e,t){if(e.length===0)return Un;const r=e.filter(i=>i.runItem instanceof Ae).map(i=>i.runItem);if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Un;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:He(s.output)}:Un;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:He(i.output)}:Un}if(typeof a=="function")return a(t._context,e);throw new K(`Invalid toolUseBehavior: ${a}`,t)}function sa(n,e){for(const t of e.newStepItems){let r;if(t instanceof Ln)r="message_output_created";else if(t instanceof Ar)r="handoff_requested";else if(t instanceof Cr)r="handoff_occurred";else if(t instanceof nt)r="tool_called";else if(t instanceof vt)r="tool_output";else if(t instanceof Ir)r="reasoning_item_created";else if(t instanceof Ae)r="tool_approval_requested";else{C.warn("Unknown item type: ",t);continue}n._addItem(new hu(r,t))}}class aa{constructor(){T(this,At,new Map)}addToolUse(e,t){u(this,At).set(e,t)}hasUsedTools(e){return u(this,At).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,At).entries()).map(([e,t])=>[e.name,t]))}}At=new WeakMap;const Jn="1.0",wu=m(Jn),Ce=g({name:d()}),ia=g({object:m("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:g({message:d(),data:ee(d(),F()).optional()}).nullable(),span_data:ee(d(),F())}).extend({previous_span:fo(()=>ia).optional()}),oa=g({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),ua=g({usage:oa,output:q(Tr),responseId:d().optional(),providerData:ee(d(),F()).optional()}),ca=le("type",[g({type:m("message_output_item"),rawItem:Zn,agent:Ce}),g({type:m("tool_call_item"),rawItem:iu.or(Gt),agent:Ce}),g({type:m("tool_call_output_item"),rawItem:br,agent:Ce,output:d()}),g({type:m("reasoning_item"),rawItem:Sr,agent:Ce}),g({type:m("handoff_call_item"),rawItem:Vt,agent:Ce}),g({type:m("handoff_output_item"),rawItem:br,sourceAgent:Ce,targetAgent:Ce}),g({type:m("tool_approval_item"),rawItem:Vt.or(Gt),agent:Ce})]),bu=g({object:m("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:ee(d(),F())}),xu=g({newItems:q(ca),toolsUsed:q(d()),handoffs:q(g({toolCall:F(),handoff:F()})),functions:q(g({toolCall:F(),tool:F()})),computerActions:q(g({toolCall:F(),computer:F()})),mcpApprovalRequests:q(g({requestItem:g({rawItem:g({type:m("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional(),providerData:ee(d(),F()).nullable().optional()})}),mcpTool:g({type:m("hosted_tool"),name:m("hosted_mcp"),providerData:ee(d(),F())})})).optional()}),da=g({tripwireTriggered:Lt(),outputInfo:F()}),Su=g({guardrail:g({type:m("input"),name:d()}),output:da}),Tu=g({guardrail:g({type:m("output"),name:d()}),agentOutput:F(),agent:Ce,output:da}),la=g({$schemaVersion:wu,currentTurn:A(),currentAgent:Ce,originalInput:d().or(q(ou)),modelResponses:q(ua),context:g({usage:oa,approvals:ee(d(),g({approved:q(d()).or(Lt()),rejected:q(d()).or(Lt())})),context:ee(d(),F())}),toolUseTracker:ee(d(),q(d())),maxTurns:A(),currentAgentSpan:ia.nullable().optional(),noActiveAgentRun:Lt(),inputGuardrailResults:q(Su),outputGuardrailResults:q(Tu),currentStep:gu.optional(),lastModelResponse:ua.optional(),generatedItems:q(ca),lastProcessedResponse:xu.optional(),trace:bu.nullable()});class rt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new aa,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Ft()}getInterruptions(){var e;return((e=this._currentStep)==null?void 0:e.type)!=="next_step_interruption"?[]:this._currentStep.data.interruptions}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:Jn,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId,providerData:s.providerData})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=la.safeParse(e);if(!t.success)throw new Ci(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,h,x,b,w;const[r,s]=await Hn(()=>JSON.parse(t));if(r)throw new K(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new K("Run state is missing schema version");if(a!==Jn)throw new K(`Run state schema version ${a} is not supported. Please use version ${Jn}`);const i=la.parse(JSON.parse(t)),o=ku(e),c=new yt(i.context.context);c._rebuildApprovals(i.context.approvals);const l=o.get(i.currentAgent.name);if(!l)throw new K(`Agent ${i.currentAgent.name} not found`);const p=new rt(c,"",l,i.maxTurns);p._currentTurn=i.currentTurn,p._toolUseTracker=new aa;for(const[E,R]of Object.entries(i.toolUseTracker))p._toolUseTracker.addToolUse(o.get(E),R);if(i.currentAgentSpan){i.trace||C.warn("Trace is not set, skipping tracing setup");const E=Ie().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(h=i.trace)==null?void 0:h.workflow_name,groupId:((x=i.trace)==null?void 0:x.group_id)??void 0,metadata:(b=i.trace)==null?void 0:b.metadata});p._currentAgentSpan=pa(E,i.currentAgentSpan),p._trace=E}return p._noActiveAgentRun=i.noActiveAgentRun,p._inputGuardrailResults=i.inputGuardrailResults,p._outputGuardrailResults=i.outputGuardrailResults.map(E=>({...E,agent:o.get(E.agent.name)})),p._currentStep=i.currentStep,p._originalInput=i.originalInput,p._modelResponses=i.modelResponses.map(fa),p._lastTurnResponse=i.lastModelResponse?fa(i.lastModelResponse):void 0,p._generatedItems=i.generatedItems.map(E=>ha(E,o)),p._lastProcessedResponse=i.lastProcessedResponse?await Iu(o,p._currentAgent,i.lastProcessedResponse):void 0,((w=i.currentStep)==null?void 0:w.type)==="next_step_handoff"&&(p._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),p}}function ku(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof st?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function pa(n,e){const t=e.span_data,r=e.previous_span?pa(n,e.previous_span):void 0,s=Ie().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function fa(n){const e=new $n;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>Tr.parse(t)),responseId:n.responseId,providerData:n.providerData}}function ha(n,e){switch(n.type){case"message_output_item":return new Ln(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new nt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new vt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new Ir(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new Ar(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Cr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new Ae(n.rawItem,e.get(n.agent.name))}}async function Iu(n,e,t){const r=await e.getAllTools(),s=new Map(r.filter(c=>c.type==="function").map(c=>[c.name,c])),a=new Map(r.filter(c=>c.type==="computer").map(c=>[c.name,c])),i=new Map(e.handoffs.map(c=>c instanceof st?[c.name,Us(c)]:[c.toolName,c])),o={newItems:t.newItems.map(c=>ha(c,n)),toolsUsed:t.toolsUsed,handoffs:t.handoffs.map(c=>{if(!i.has(c.handoff.toolName))throw new K(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:i.get(c.handoff.toolName)}}),functions:await Promise.all(t.functions.map(async c=>{if(!s.has(c.tool.name))throw new K(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:s.get(c.tool.name)}})),computerActions:t.computerActions.map(c=>{const l=c.computer.name;if(!a.has(l))throw new K(`Computer tool ${l} not found`);return{toolCall:c.toolCall,computer:a.get(l)}}),mcpApprovalRequests:(t.mcpApprovalRequests??[]).map(c=>({requestItem:new Ae(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...o,hasToolsOrApprovalsToRun(){return o.handoffs.length>0||o.functions.length>0||o.mcpApprovalRequests.length>0||o.computerActions.length>0}}}const ma=10;function ga(n,e){return n?!1:e?!0:"enabled_without_data"}function Bn(n,e){const t=e.filter(r=>r.type!=="tool_approval_item").map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class Au extends qo{constructor(t={}){super();T(this,ie);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??zo(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map($s),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(yr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof rt&&r._trace?ko(r._trace,async()=>(r._currentAgentSpan&&Pn(r._currentAgentSpan),s!=null&&s.stream?L(this,ie,Fr).call(this,t,r,s):L(this,ie,Zr).call(this,t,r,s))):Io(async()=>s!=null&&s.stream?L(this,ie,Fr).call(this,t,r,s):L(this,ie,Zr).call(this,t,r,s),{traceId:this.config.traceId,name:this.config.workflowName,groupId:this.config.groupId,metadata:this.config.traceMetadata})}}ie=new WeakSet,Zr=async function(t,r,s){return pr(async()=>{var i,o;const a=r instanceof rt?r:new rt(s.context instanceof yt?s.context:new yt(s.context),r,t,s.maxTurns??ma);try{for(;;){let c=_a(a._currentAgent.model,this.config.model);if(typeof c=="string"&&(c=await this.config.modelProvider.getModel(c)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new K("No model response found in previous state",a);const l=await ea(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);if(a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=l.originalInput,a._generatedItems=l.generatedItems,a._currentStep=l.nextStep,l.nextStep.type==="next_step_interruption")return new kr(a);continue}if(a._currentStep.type==="next_step_run_again"){const l=[];if(a._currentAgent.handoffs&&l.push(...a._currentAgent.handoffs.map(Mn)),!a._currentAgentSpan){const R=l.map(Y=>Y.agentName);a._currentAgentSpan=js({data:{name:a._currentAgent.name,handoffs:R,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),Pn(a._currentAgentSpan)}const p=await a._currentAgent.getAllTools(),f=p.map(R=>Hs(R)),h=l.map(R=>Ys(R));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=p.map(R=>R.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new ns(`Max turns (${a._maxTurns}) exceeded`,a);C.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await L(this,ie,$r).call(this,a);const x=Bn(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let b={...this.config.modelSettings,...a._currentAgent.modelSettings};b=Ks(a._currentAgent,a._toolUseTracker,b),a._lastTurnResponse=await c.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),prompt:await a._currentAgent.getPrompt(a._context),input:x,previousResponseId:s.previousResponseId,modelSettings:b,tools:f,outputType:as(a._currentAgent.outputType),handoffs:h,tracing:ga(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const w=Qs(a._lastTurnResponse,a._currentAgent,p,l);a._lastProcessedResponse=w;const E=await ta(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=E.originalInput,a._generatedItems=E.generatedItems,a._currentStep=E.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await L(this,ie,Lr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new kr(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),Jt(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new kr(a);C.debug("Running next loop")}}}catch(c){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{a._currentAgentSpan&&(((o=a._currentStep)==null?void 0:o.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),Jt())}})},$r=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map($s));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Zs(async o=>{const c=await i.run(s);return o.spanData.triggered=c.output.tripwireTriggered,c},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new ss(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof ss?a:(t._currentTurn--,new rs(`Input guardrail failed to complete: ${a}`,a,t))}}},Lr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(yr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context,details:{modelResponse:t._lastTurnResponse}};try{const o=await Promise.all(s.map(async c=>Zs(async l=>{const p=await c.run(i);return l.spanData.triggered=p.output.tripwireTriggered,p},{data:{name:c.name}},t._currentAgentSpan)));for(const c of o)if(c.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:c.guardrail.name}}),new yn(`Output guardrail triggered: ${JSON.stringify(c.output.outputInfo)}`,c,t)}catch(o){throw o instanceof yn?o:new rs(`Output guardrail failed to complete: ${o}`,o,t)}}},Ea=async function(t,r){var s,a,i;try{for(;;){const o=t.state._currentAgent,c=o.handoffs.map(Mn),l=await o.getAllTools(),p=l.map(h=>Hs(h)),f=c.map(h=>Ys(h));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new K("No model response found in previous state",t.state);const h=await ea(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);if(sa(t,h),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=h.originalInput,t.state._generatedItems=h.generatedItems,t.state._currentStep=h.nextStep,h.nextStep.type==="next_step_interruption")return;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const Y=c.map(ne=>ne.agentName);t.state._currentAgentSpan=js({data:{name:o.name,handoffs:Y,tools:l.map(ne=>ne.name),output_type:o.outputSchemaName}}),t.state._currentAgentSpan.start(),Pn(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new ns(`Max turns (${t.state._maxTurns}) exceeded`,t.state);C.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);let h=_a(o.model,this.config.model);typeof h=="string"&&(h=await this.config.modelProvider.getModel(h)),t.state._currentTurn===1&&await L(this,ie,$r).call(this,t.state);let x={...this.config.modelSettings,...o.modelSettings};x=Ks(o,t.state._toolUseTracker,x);const b=Bn(t.input,t.newItems);t.state._noActiveAgentRun&&(o.emit("agent_start",t.state._context,o),this.emit("agent_start",t.state._context,o));let w;for await(const Y of h.getStreamedResponse({systemInstructions:await o.getSystemPrompt(t.state._context),prompt:await o.getPrompt(t.state._context),input:b,previousResponseId:r.previousResponseId,modelSettings:x,tools:p,handoffs:f,outputType:as(o.outputType),tracing:ga(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(Y.type==="response_done"){const ne=zs.parse(Y);w={usage:new $n(ne.response.usage),output:ne.response.output,responseId:ne.response.id}}if(t.cancelled)return;t._addItem(new fu(Y))}if(t.state._noActiveAgentRun=!1,!w)throw new de("Model did not produce a final response!",t.state);t.state._lastTurnResponse=w,t.state._modelResponses.push(t.state._lastTurnResponse);const E=Qs(t.state._lastTurnResponse,o,l,c);t.state._lastProcessedResponse=E;const R=await ta(o,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);sa(t,R),t.state._toolUseTracker.addToolUse(o,E.toolsUsed),t.state._originalInput=R.originalInput,t.state._generatedItems=R.generatedItems,t.state._currentStep=R.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await L(this,ie,Lr).call(this,t.state,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),Jt()),t.state._currentAgentSpan=void 0,t._addItem(new mu(t.state._currentAgent)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):C.debug("Running next loop")}}}catch(o){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(o)}}),o}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),Jt())}},Fr=async function(t,r,s){return s=s??{},pr(async()=>{const a=r instanceof rt?r:new rt(s.context instanceof yt?s.context:new yt(s.context),r,t,s.maxTurns??ma),i=new lu({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,L(this,ie,Ea).call(this,i,s).then(()=>{i._done()},o=>{i._raiseError(o)}),i})};function _a(n,e){return typeof n=="string"&&n!==st.DEFAULT_MODEL_PLACEHOLDER||n?n:e??n??st.DEFAULT_MODEL_PLACEHOLDER}const Ct=class Ct extends Bo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"prompt");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new K("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??Ct.DEFAULT_MODEL_PLACEHOLDER,this.prompt=t.prompt,this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??{},this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&C.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new Ct({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(We(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new Ct({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a}=t;return bn({name:r??vn(this.name),description:s??"",parameters:{type:"object",properties:{input:{type:"string"}},required:["input"],additionalProperties:!1},strict:!0,execute:async(i,o)=>{if(!Oi(i))throw new de("Agent tool called with invalid input");const l=await new Au().run(this,i.input,{context:o==null?void 0:o.context});return typeof a=="function"?a(l):pu(l.rawResponses[l.rawResponses.length-1])}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getPrompt(t){return typeof this.prompt=="function"?await this.prompt(t,this):this.prompt}async getMcpTools(){return this.mcpServers.length>0?go(this.mcpServers):[]}async getAllTools(){return[...await this.getMcpTools(),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return We(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}};_(Ct,"DEFAULT_MODEL_PLACEHOLDER","");let st=Ct;Jo(Ns());class Cu extends st{constructor(t){super(t);_(this,"voice");this.voice=t.voice??"ash"}}function Eu(n){return{debounceTextLength:n.debounceTextLength??100}}function Ou({policyHint:n,...e}){const t=yr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Nu(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const Pe=ps("openai-agents:realtime");g({itemId:d()});const ya=le("role",[g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("system"),content:q(g({type:m("input_text"),text:d()}))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("user"),status:ue(["in_progress","completed"]),content:q(g({type:m("input_text"),text:d()}).or(g({type:m("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:m("message"),role:m("assistant"),status:ue(["in_progress","completed","incomplete"]),content:q(g({type:m("text"),text:d()}).or(g({type:m("audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),va=g({itemId:d(),previousItemId:d().nullable().optional(),type:m("function_call"),status:ue(["in_progress","completed"]),arguments:d(),name:d(),output:d().nullable()}),wa=g({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:A().or(m("inf")).optional().nullable(),metadata:ee(d(),F()).optional().nullable(),modalities:q(d()).optional().nullable(),object:m("realtime.response").optional().nullable(),output:q(F()).optional().nullable(),output_audio_format:d().optional().nullable(),status:ue(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:ee(d(),F()).optional().nullable(),usage:g({input_tokens:A().optional(),input_tokens_details:ee(d(),F()).optional().nullable(),output_tokens:A().optional(),output_tokens_details:ee(d(),F()).optional().nullable()}).optional().nullable(),voice:d().optional().nullable()}),Ru=g({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:Is([m("input_text"),m("input_audio"),m("item_reference"),m("text"),m("audio")])}),zt=g({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:q(Ru).optional(),name:d().optional(),object:m("realtime.item").optional(),output:d().optional(),role:ue(["user","assistant","system"]).optional(),status:ue(["completed","incomplete","in_progress"]).optional(),type:ue(["message","function_call","function_call_output"]).optional()}),Du=g({type:m("conversation.created"),event_id:d(),conversation:g({id:d().optional(),object:m("realtime.conversation").optional()})}),Pu=g({type:m("conversation.item.created"),event_id:d(),item:zt,previous_item_id:d().nullable().optional()}),ju=g({type:m("conversation.item.deleted"),event_id:d(),item_id:d()}),Mu=g({type:m("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),logprobs:q(F()).nullable().optional()}),Zu=g({type:m("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:A().optional(),delta:d().optional(),logprobs:q(F()).nullable().optional()}),$u=g({type:m("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:A(),error:g({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),Lu=g({type:m("conversation.item.retrieved"),event_id:d(),item:zt}),Fu=g({type:m("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:A(),content_index:A()}),Uu=g({type:m("conversation.item.create"),item:zt,event_id:d().optional(),previous_item_id:d().nullable().optional()}),Ju=g({type:m("conversation.item.delete"),item_id:d(),event_id:d().optional()}),Bu=g({type:m("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),qu=g({type:m("conversation.item.truncate"),item_id:d(),audio_end_ms:A(),content_index:A(),event_id:d().optional()}),Gu=g({type:m("error"),event_id:d().optional(),error:F().optional()}),Vu=g({type:m("input_audio_buffer.cleared"),event_id:d()}),zu=g({type:m("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Wu=g({type:m("input_audio_buffer.clear"),event_id:d().optional()}),Hu=g({type:m("input_audio_buffer.commit"),event_id:d().optional()}),Yu=g({type:m("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),Xu=g({type:m("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:A()}),Qu=g({type:m("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:A()}),Ku=g({type:m("output_audio_buffer.started"),event_id:d()}).passthrough(),ec=g({type:m("output_audio_buffer.stopped"),event_id:d()}).passthrough(),tc=g({type:m("output_audio_buffer.cleared"),event_id:d()}),nc=g({type:m("rate_limits.updated"),event_id:d(),rate_limits:q(g({limit:A().optional(),name:ue(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),rc=g({type:m("response.audio.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),sc=g({type:m("response.audio.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d()}),ac=g({type:m("response.audio_transcript.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),ic=g({type:m("response.audio_transcript.done"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),output_index:A(),response_id:d()}),oc=g({type:m("response.content_part.added"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:ue(["text","audio"]).optional()})}),uc=g({type:m("response.content_part.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:ue(["text","audio"]).optional()})}),cc=g({type:m("response.created"),event_id:d(),response:wa}),ba=g({type:m("response.done"),event_id:d(),response:wa}),dc=g({type:m("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:A(),response_id:d()}),lc=g({type:m("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:A(),response_id:d()}),pc=g({type:m("response.output_item.added"),event_id:d(),item:zt,output_index:A(),response_id:d()}),fc=g({type:m("response.output_item.done"),event_id:d(),item:zt,output_index:A(),response_id:d()}),hc=g({type:m("response.text.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),mc=g({type:m("response.text.done"),event_id:d(),item_id:d(),content_index:A(),text:d(),output_index:A(),response_id:d()}),gc=g({type:m("session.created"),event_id:d(),session:F()}),_c=g({type:m("session.updated"),event_id:d(),session:F()}),yc=g({type:m("response.cancel"),event_id:d().optional(),response_id:d().optional()}),vc=g({type:m("response.create"),event_id:d().optional(),response:F().optional()}),wc=g({type:m("session.update"),event_id:d().optional(),session:F()}),bc=g({type:m("transcription_session.update"),event_id:d().optional(),session:F()}),xc=g({type:m("transcription_session.updated"),event_id:d(),session:F()}),Sc=g({type:d(),event_id:d().optional().nullable()}).passthrough(),Tc=le("type",[Du,Pu,ju,Mu,Zu,$u,Lu,Fu,Gu,Vu,Yu,Xu,Qu,Ku,ec,tc,nc,rc,sc,ac,ic,oc,uc,cc,ba,dc,lc,pc,fc,hc,mc,gc,_c,xc]);le("type",[Uu,Ju,Bu,qu,zu,Wu,Hu,yc,vc,wc,bc]);function Er(n){const e=JSON.parse(n.data.toString()),t=Tc.safeParse(e);if(!t.success){const r=Sc.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const xa="gpt-4o-realtime-preview",be={voice:"ash",modalities:["text","audio"],inputAudioFormat:"pcm16",outputAudioFormat:"pcm16",inputAudioTranscription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"},inputAudioNoiseReduction:null,speed:1},Rr=class Rr extends _r{constructor(t={}){super();T(this,ut);T(this,un);T(this,he,null);T(this,cn,null);_(this,"eventEmitter",new Dn);y(this,ut,t.model??xa),y(this,un,t.apiKey)}get currentModel(){return u(this,ut)}set currentModel(t){y(this,ut,t)}get _rawSessionConfig(){return u(this,cn)??null}async _getApiKey(t){const r=t.apiKey??u(this,un);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,c,l,p;const{data:r,isGeneric:s}=Er(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="session.updated"&&y(this,cn,r.session),r.type==="response.done"){const f=ba.safeParse(r);if(!f.success){Pe.error("Error parsing response done event",f.error);return}const h=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,x=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,b=h+x,w=new $n({inputTokens:h,inputTokensDetails:((o=f.data.response.usage)==null?void 0:o.input_tokens_details)??{},outputTokens:x,outputTokensDetails:((c=f.data.response.usage)==null?void 0:c.output_tokens_details)??{},totalTokens:b});this.emit("usage_update",w),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:h,inputTokensDetails:((l=f.data.response.usage)==null?void 0:l.input_tokens_details)??{},outputTokens:x,outputTokensDetails:((p=f.data.response.usage)==null?void 0:p.output_tokens_details)??{},totalTokens:b}}});return}if(r.type==="response.audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.text.delta"||r.type==="response.audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if((r.type==="conversation.item.created"||r.type==="conversation.item.retrieved")&&r.item.type==="message"){const f=r.type==="conversation.item.created"?r.previous_item_id:null,h=ya.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",h);return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const h=va.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",h),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="message"){const h=ya.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:"in_progress"});this.emit("item_update",h);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r){this.sendEvent({type:"conversation.item.create",item:typeof t=="string"?{type:"message",role:"user",content:[{type:"input_text",text:t}]}:t,...r}),this.sendEvent({type:"response.create"})}_getMergedSessionConfig(t){var s;return{instructions:t.instructions,model:t.model??u(this,ut)??be.model,voice:t.voice??be.voice,speed:t.speed??be.speed,modalities:t.modalities??be.modalities,input_audio_format:t.inputAudioFormat??be.inputAudioFormat,output_audio_format:t.outputAudioFormat??be.outputAudioFormat,input_audio_transcription:t.inputAudioTranscription??be.inputAudioTranscription,input_audio_noise_reduction:t.inputAudioNoiseReduction??be.inputAudioNoiseReduction,turn_detection:Rr.buildTurnDetectionConfig(t.turnDetection)??be.turnDetection,tool_choice:t.toolChoice??be.toolChoice,tools:(s=t.tools)==null?void 0:s.map(a=>({...a,strict:void 0})),...t.providerData??{}}}static buildTurnDetectionConfig(t){if(typeof t>"u")return;const{type:r,createResponse:s,create_response:a,eagerness:i,interruptResponse:o,interrupt_response:c,prefixPaddingMs:l,prefix_padding_ms:p,silenceDurationMs:f,silence_duration_ms:h,threshold:x,...b}=t,w={type:r,create_response:s||a,eagerness:i,interrupt_response:o||c,prefix_padding_ms:l||p,silence_duration_ms:f||h,threshold:x,...b};return Object.keys(w).forEach(E=>{w[E]===void 0&&delete w[E]}),Object.keys(w).length>0?w:void 0}set _tracingConfig(t){y(this,he,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,he)>"u"&&y(this,he,null),t==="auto"){this.sendEvent({type:"session.update",session:{tracing:"auto"}});return}if(typeof u(this,he)!="string"&&typeof t!="string"){Pe.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Pe.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{tracing:null}});return}if(u(this,he)===null||typeof u(this,he)=="string"){this.sendEvent({type:"session.update",session:{tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,he))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,he))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,he))==null?void 0:a.workflow_name)){Pe.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,he)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=va.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Pe.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Pt(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Pa(t,r),o=new Set(s.map(l=>l.itemId));for(const l of i)o.add(l.itemId);if(o.size>0)for(const l of o)this.sendEvent({type:"conversation.item.delete",item_id:l});const c=[...a,...i];for(const l of c)if(l.type==="message"){const p={type:"message",role:l.role,content:l.content,id:l.itemId};l.role!=="system"&&l.status&&(p.status=l.status),this.sendEvent({type:"conversation.item.create",item:p})}else l.type==="function_call"&&Pe.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}};ut=new WeakMap,un=new WeakMap,he=new WeakMap,cn=new WeakMap;let Wt=Rr;class Sa extends Wt{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");T(this,dn);T(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0});T(this,ln);T(this,ct,!1);T(this,pn,!1);this.options=t,y(this,dn,t.baseUrl??"https://api.openai.com/v1/realtime"),y(this,ln,t.useInsecureApiKey??!1)}get status(){return u(this,z).status}get connectionState(){return u(this,z)}get muted(){return u(this,pn)}async connect(t){if(u(this,z).status==="connected")return;u(this,z).status==="connecting"&&Pe.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,dn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,ln)&&!i)throw new K("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");return new Promise(async(o,c)=>{try{const l={...t.initialSessionConfig||{},model:this.currentModel},p=new URL(s);let f=new RTCPeerConnection;const h=f.createDataChannel("oai-events");y(this,z,{status:"connecting",peerConnection:f,dataChannel:h}),this.emit("connection_change",u(this,z).status),h.addEventListener("open",()=>{y(this,z,{status:"connected",peerConnection:f,dataChannel:h}),this.updateSessionConfig(l),this.emit("connection_change",u(this,z).status),this._onOpen(),o()}),h.addEventListener("error",me=>{this.close(),this._onError(me),c(me)}),h.addEventListener("message",me=>{this._onMessage(me);const{data:ge,isGeneric:gn}=Er(me);!ge||gn||(ge.type==="response.created"?y(this,ct,!0):ge.type==="response.done"&&y(this,ct,!1),ge.type==="session.created"&&(this._tracingConfig=ge.session.tracing,this._updateTracingConfig(l.tracing??"auto")))});const x=this.options.audioElement??document.createElement("audio");x.autoplay=!0,f.ontrack=me=>{x.srcObject=me.streams[0]};const b=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});f.addTrack(b.getAudioTracks()[0]),this.options.changePeerConnection&&(f=await this.options.changePeerConnection(f),y(this,z,{...u(this,z),peerConnection:f}));const w=await f.createOffer();if(await f.setLocalDescription(w),!w.sdp)throw new Error("Failed to create offer");const E={...this._getMergedSessionConfig(l),model:this.currentModel},R=new FormData;R.append("sdp",w.sdp),R.append("session",JSON.stringify(E));const ne={type:"answer",sdp:await(await fetch(p,{method:"POST",body:R,headers:{Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Ma["X-OpenAI-Agents-SDK"]}})).text()};await f.setRemoteDescription(ne)}catch(l){this.close(),this._onError(l),c(l)}})}sendEvent(t){if(!u(this,z).dataChannel||u(this,z).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,z).dataChannel.send(JSON.stringify(t))}mute(t){y(this,pn,t),u(this,z).peerConnection&&u(this,z).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,z).dataChannel&&u(this,z).dataChannel.close(),u(this,z).peerConnection){const t=u(this,z).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,z).status!=="disconnected"&&(y(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0}),this.emit("connection_change",u(this,z).status),this._onClose())}interrupt(){u(this,ct)&&(this.sendEvent({type:"response.cancel"}),y(this,ct,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}dn=new WeakMap,z=new WeakMap,ln=new WeakMap,ct=new WeakMap,pn=new WeakMap;const kc=globalThis.WebSocket;class Ta extends Wt{constructor(t={}){super(t);T(this,Gn);T(this,dt);T(this,lt);T(this,te,{status:"disconnected",websocket:void 0});T(this,fn);T(this,Ze);T(this,pt);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);T(this,ft,!1);y(this,lt,t.url),y(this,fn,t.useInsecureApiKey??!1)}get status(){return u(this,te).status}get connectionState(){return u(this,te)}get muted(){return null}get currentItemId(){return u(this,Ze)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,dt,await this._getApiKey(t));const s=t.url??u(this,lt)??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`;y(this,lt,s);const a={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((i,o)=>{try{L(this,Gn,Oa).call(this,i,o,a)}catch(c){o(c)}}),await this.updateSessionConfig(a)}sendEvent(t){if(!u(this,te).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,te).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,te).websocket)==null||t.close(),y(this,Ze,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,pt,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,te).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,ft)&&(this.sendEvent({type:"response.cancel"}),y(this,ft,!1))}_interrupt(t,r=!0){t<0||t>this._audioLengthMs||(r&&this._cancelResponse(),this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,Ze),content_index:u(this,pt),audio_end_ms:t}))}interrupt(t=!0){if(!u(this,Ze)||typeof this._firstAudioTimestamp!="number")return;const r=Date.now()-this._firstAudioTimestamp;r>=0&&this._interrupt(r,t),y(this,Ze,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,pt,void 0)}}dt=new WeakMap,lt=new WeakMap,te=new WeakMap,fn=new WeakMap,Ze=new WeakMap,pt=new WeakMap,ft=new WeakMap,Gn=new WeakSet,Oa=function(t,r,s){if(u(this,te).websocket){t();return}if(!u(this,dt))throw new K("API key is not set. Please call `connect()` with an API key first.");if(!u(this,dt).startsWith("ek_")&&!u(this,fn))throw new K("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+u(this,dt),"openai-beta.realtime-v1",Za],i=new kc(u(this,lt),a);y(this,te,{status:"connecting",websocket:i}),this.emit("connection_change",u(this,te).status),i.addEventListener("open",()=>{y(this,te,{status:"connected",websocket:i}),this.emit("connection_change",u(this,te).status),this._onOpen(),t()}),i.addEventListener("error",o=>{this._onError(o),y(this,te,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,te).status),r(o)}),i.addEventListener("message",o=>{var p,f,h;this._onMessage(o);const{data:c,isGeneric:l}=Er(o);if(!(!c||l))if(c.type==="response.audio.delta"){y(this,pt,c.content_index),y(this,Ze,c.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const x=X(c.delta);(((p=this._rawSessionConfig)==null?void 0:p.output_audio_format)??"pcm16").startsWith("g711_")?this._audioLengthMs+=x.byteLength/8:this._audioLengthMs+=x.byteLength/24/2;const w={type:"audio",data:x,responseId:c.response_id};this._onAudio(w)}else if(c.type==="input_audio_buffer.speech_started"){const x=((h=(f=this._rawSessionConfig)==null?void 0:f.turn_detection)==null?void 0:h.interrupt_response)??!1;this.interrupt(!x)}else c.type==="response.created"?y(this,ft,!0):c.type==="response.done"?y(this,ft,!1):c.type==="session.created"&&(this._tracingConfig=c.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,te,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,te).status),this._onClose()})};class Ic extends Dn{constructor(t,r={}){super();T(this,H);_(this,"initialAgent");_(this,"options");T(this,B);T(this,Z);T(this,hn,[]);T(this,M);T(this,Et,[]);T(this,Ot);T(this,mn,{});T(this,W,[]);T(this,Nt);T(this,Rt,{});T(this,Ee,!1);this.initialAgent=t,this.options=r,typeof r.transport>"u"&&ja()||r.transport==="webrtc"?y(this,B,new Sa):r.transport==="websocket"||typeof r.transport>"u"?y(this,B,new Ta):y(this,B,r.transport),y(this,Z,t),y(this,M,new yt({...r.context??{},history:u(this,W)})),y(this,Et,(r.outputGuardrails??[]).map(Ou)),y(this,Ot,Eu(r.outputGuardrailSettings??{})),y(this,Nt,r.historyStoreAudio??!1)}get transport(){return u(this,B)}get currentAgent(){return u(this,Z)}get usage(){return u(this,M).usage}get context(){return u(this,M)}get muted(){return u(this,B).muted}get history(){return u(this,W)}async updateAgent(t){return u(this,Z).emit("agent_handoff",u(this,M),t),this.emit("agent_handoff",u(this,M),u(this,Z),t),await L(this,H,Vn).call(this,t),await u(this,B).updateSessionConfig(await L(this,H,zn).call(this)),t}async connect(t){await L(this,H,Vn).call(this,this.initialAgent),L(this,H,Da).call(this),await u(this,B).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,url:t.url,initialSessionConfig:await L(this,H,zn).call(this,this.options.config)}),y(this,W,[]),this.emit("history_updated",u(this,W))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,W)):r=t,u(this,B).resetHistory(u(this,W),r)}sendMessage(t,r={}){u(this,B).sendMessage(t,r)}mute(t){u(this,B).mute(t)}close(){y(this,Rt,{}),u(this,B).close()}sendAudio(t,r={}){u(this,B).sendAudio(t,r)}interrupt(){u(this,B).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,M).approveTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,H,Wn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,M).rejectTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await L(this,H,Wn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}}B=new WeakMap,Z=new WeakMap,hn=new WeakMap,M=new WeakMap,Et=new WeakMap,Ot=new WeakMap,mn=new WeakMap,W=new WeakMap,Nt=new WeakMap,Rt=new WeakMap,Ee=new WeakMap,H=new WeakSet,Vn=async function(t){y(this,Z,t);const s=u(this,Z).handoffs.map(Mn).map(a=>a.getHandoffAsFunctionTool());y(this,hn,[...(await u(this,Z).getAllTools()).filter(a=>a.type==="function"),...s])},zn=async function(t={}){const r=await u(this,Z).getSystemPrompt(u(this,M)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";return s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Pe.warn("In order to set traceMetadata or a groupId you need to specify a workflowName."),{instructions:r,voice:u(this,Z).voice,model:this.options.model,tools:u(this,hn),tracing:s,...t}},Na=async function(t,r){const s=await r.onInvokeHandoff(u(this,M),t.arguments);u(this,Z).emit("agent_handoff",u(this,M),s),this.emit("agent_handoff",u(this,M),u(this,Z),s),await L(this,H,Vn).call(this,s),await u(this,B).updateSessionConfig(await L(this,H,zn).call(this));const a=Ls(s);return u(this,B).sendFunctionCallOutput(t,a,!0),s},Wn=async function(t,r){u(this,M).context.history=JSON.parse(JSON.stringify(u(this,W)));let s=t.arguments;if(r.parameters&&(We(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,M),s,t.callId)){const c=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(c===!1){this.emit("agent_tool_start",u(this,M),u(this,Z),r,{toolCall:t}),u(this,Z).emit("agent_tool_start",u(this,M),r,{toolCall:t});const l="Tool execution was not approved.";u(this,B).sendFunctionCallOutput(t,l,!0),this.emit("agent_tool_end",u(this,M),u(this,Z),r,l,{toolCall:t}),u(this,Z).emit("agent_tool_end",u(this,M),r,l,{toolCall:t});return}else if(typeof c>"u"){this.emit("tool_approval_requested",u(this,M),u(this,Z),{type:"function_approval",tool:r,approvalItem:new Ae(t,u(this,Z))});return}}this.emit("agent_tool_start",u(this,M),u(this,Z),r,{toolCall:t}),u(this,Z).emit("agent_tool_start",u(this,M),r,{toolCall:t}),u(this,M).context.history=JSON.parse(JSON.stringify(u(this,W)));const i=await r.invoke(u(this,M),t.arguments),o=He(i);u(this,B).sendFunctionCallOutput(t,o,!0),this.emit("agent_tool_end",u(this,M),u(this,Z),r,o,{toolCall:t}),u(this,Z).emit("agent_tool_end",u(this,M),r,o,{toolCall:t})},Ra=async function(t){const r=new Map(u(this,Z).handoffs.map(Mn).map(i=>[i.toolName,i])),s=new Map((await u(this,Z).getAllTools()).map(i=>[i.name,i])),a=r.get(t.name);if(a)await L(this,H,Na).call(this,t,a);else{const i=s.get(t.name);if(i&&i.type==="function")await L(this,H,Wn).call(this,t,i);else throw new de(`Tool ${t.name} not found`)}},Ur=async function(t,r,s){if(u(this,Et).length===0)return;const a={agent:u(this,Z),agentOutput:t,context:u(this,M)},o=(await Promise.all(u(this,Et).map(c=>c.run(a)))).find(c=>c.output.tripwireTriggered);if(o){if(u(this,Rt)[r])return;u(this,Rt)[r]=!0;const c=new yn(`Output guardrail triggered: ${JSON.stringify(o.output.outputInfo)}`,o);this.emit("guardrail_tripped",u(this,M),u(this,Z),c,{itemId:s}),this.interrupt();const l=Nu(o);this.sendMessage(l);return}},Da=function(){u(this,B).on("*",s=>{if(this.emit("transport_event",s),s.type==="conversation.item.input_audio_transcription.completed")try{const a=s;y(this,W,qr(u(this,W),a,u(this,Nt))),u(this,M).context.history=u(this,W),this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("audio",s=>{u(this,Ee)||(y(this,Ee,!0),this.emit("audio_start",u(this,M),u(this,Z))),this.emit("audio",s)}),u(this,B).on("turn_started",()=>{y(this,Ee,!1),this.emit("agent_start",u(this,M),u(this,Z)),u(this,Z).emit("agent_start",u(this,M),u(this,Z))}),u(this,B).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Jr(a)??"",o=(a==null?void 0:a.id)??"";this.emit("agent_end",u(this,M),u(this,Z),i),u(this,Z).emit("agent_end",u(this,M),i),L(this,H,Ur).call(this,i,s.response.id,o)}),u(this,B).on("audio_done",()=>{u(this,Ee)&&y(this,Ee,!1),this.emit("audio_stopped",u(this,M),u(this,Z))});let t=0,r;u(this,B).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const l=(u(this,mn)[i]??"")+a;if(u(this,mn)[i]=l,u(this,Ot).debounceTextLength<0)return;const p=Math.floor(l.length/u(this,Ot).debounceTextLength);p>t&&(t=p,L(this,H,Ur).call(this,l,o,i))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("item_update",s=>{try{const a=!u(this,W).some(i=>i.itemId===s.itemId);if(y(this,W,qr(u(this,W),s,u(this,Nt))),u(this,M).context.history=u(this,W),a){const i=u(this,W).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("item_deleted",s=>{try{y(this,W,u(this,W).filter(a=>a.itemId!==s.itemId)),u(this,M).context.history=u(this,W),this.emit("history_updated",u(this,W))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("function_call",async s=>{try{await L(this,H,Ra).call(this,s)}catch(a){Pe.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,B).on("usage_update",s=>{u(this,M).usage.add(s)}),u(this,B).on("audio_interrupted",()=>{u(this,Ee)&&y(this,Ee,!1),this.emit("audio_interrupted",u(this,M),u(this,Z))}),u(this,B).on("error",s=>{this.emit("error",s)})};const Ac={base64ToArrayBuffer:X,arrayBufferToBase64:Pt,getLastTextFromAudioOutputMessage:Jr};P.DEFAULT_OPENAI_REALTIME_MODEL=xa,P.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=be,P.ModelBehaviorError=de,P.OpenAIRealtimeBase=Wt,P.OpenAIRealtimeWebRTC=Sa,P.OpenAIRealtimeWebSocket=Ta,P.OutputGuardrailTripwireTriggered=yn,P.RealtimeAgent=Cu,P.RealtimeSession=Ic,P.UserError=K,P.tool=bn,P.utils=Ac,Object.defineProperty(P,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
