{
  "ocr_preprocessing_commands": {
    "analyze_ocr_image": {
      "description": "OCR対象画像を分析して最適な前処理方法を提案（マルチAI連携）",
      "command": "echo 'Starting multi-AI image analysis...' && echo.",
      "usage_example": "/analyze-ocr-image {image_path:'C:\\scanned\\form001.jpg'}",
      "parameters": {
        "image_path": "分析対象画像のフルパス"
      },
      "flow": [
        "1. 画像の品質特性を分析（明度、コントラスト、ノイズレベル等）",
        "2. Gemini CLI: 文書タイプと品質問題を特定",
        "3. o3 MCP: 最適な前処理アルゴリズムを選定",
        "4. Claude Code: PreprocessingOptionsを生成・実装"
      ]
    },
    
    "implement_custom_preprocessing": {
      "description": "プロジェクト固有の前処理パターンを実装（マルチAI設計）",
      "command": "echo 'Implementing custom preprocessing pattern...' && echo.",
      "usage_example": "/implement-custom-preprocessing {project_name:'Invoice_OCR', document_characteristics:'低解像度FAX画像、背景ノイズ多'}",
      "parameters": {
        "project_name": "プロジェクト名",
        "document_characteristics": "文書の特徴説明"
      },
      "flow": [
        "1. プロジェクトの要求事項を分析",
        "2. Gemini CLI: 最適な処理フローを設計",
        "3. o3 MCP: アルゴリズム実装方法を提示",
        "4. Claude Code: カスタムプリプロセッサを実装"
      ]
    },
    
    "test_preprocessing_quality": {
      "description": "前処理結果の品質をマルチAIで評価",
      "command": "cd samples && dir *.cs && echo.",
      "usage_example": "/test-preprocessing-quality {original_image:'form001.jpg', processed_image:'form001_processed.jpg'}",
      "parameters": {
        "original_image": "元画像パス",
        "processed_image": "処理済み画像パス"
      },
      "flow": [
        "1. 処理前後の画像を比較分析",
        "2. Gemini CLI: OCR認識適性をスコア化",
        "3. o3 MCP: 改善が必要な領域を特定",
        "4. Claude Code: 品質評価レポートを生成"
      ]
    },
    
    "optimize_preprocessing_params": {
      "description": "前処理パラメータをマルチAIで最適化",
      "command": "echo 'Optimizing preprocessing parameters...' && echo.",
      "usage_example": "/optimize-preprocessing-params {image_set_path:'C:\\test_images', current_params:'{ContrastLevel:30.0, BackgroundThreshold:200}'}",
      "parameters": {
        "image_set_path": "テスト画像セットのパス",
        "current_params": "現在のパラメータ設定"
      },
      "flow": [
        "1. 画像セットで現在のパラメータを評価",
        "2. Gemini CLI: パラメータ効果を分析",
        "3. o3 MCP: 最適化戦略（グリッドサーチ等）を提案",
        "4. Claude Code: 最適化されたパラメータを実装"
      ]
    },
    
    "create_preprocessing_preset": {
      "description": "文書タイプ別の前処理プリセットを作成",
      "command": "echo 'Creating preprocessing preset...' && type samples\\ImagePreprocessor.cs | findstr /C:\"PreprocessingOptions\" && echo.",
      "usage_example": "/create-preprocessing-preset {document_type:'FAX文書', sample_images:'C:\\samples\\fax'}",
      "parameters": {
        "document_type": "文書タイプ名",
        "sample_images": "サンプル画像のパス"
      },
      "flow": [
        "1. サンプル画像から共通特性を抽出",
        "2. Gemini CLI: 文書タイプの品質問題を特定",
        "3. o3 MCP: 最適なパラメータセットを設計",
        "4. Claude Code: PreprocessingOptions.ForFAX を実装"
      ]
    }
  },
  
  "integration_notes": {
    "gemini_cli_role": "画像品質分析、文書タイプ判別、処理効果の評価",
    "o3_mcp_role": "アルゴリズム選定、最適化戦略、パフォーマンス改善",
    "claude_code_role": "実装、テスト、ドキュメント生成、UIへの統合"
  },
  
  "usage_scenarios": [
    {
      "scenario": "新規プロジェクトのOCR前処理設定",
      "steps": [
        "1. /analyze-ocr-image でサンプル画像を分析",
        "2. /implement-custom-preprocessing でカスタム処理を実装",
        "3. /test-preprocessing-quality で品質確認",
        "4. /optimize-preprocessing-params でパラメータ調整",
        "5. /create-preprocessing-preset でプリセット作成"
      ]
    },
    {
      "scenario": "既存システムの前処理改善",
      "steps": [
        "1. /analyze-ocr-results で現状の問題点を分析",
        "2. /compare-preprocessing-methods で改善方法を比較",
        "3. /benchmark-preprocessing で性能評価",
        "4. /implement-gpu-acceleration で高速化（必要に応じて）",
        "5. /generate-preprocessing-docs でドキュメント更新"
      ]
    }
  ]
}